<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Data.WPF</name>
    </assembly>
    <members>
        <member name="P:Syncfusion.Data.ColumnGroupDescription.Comparer">
            <summary>
            Gets or sets the Comparer value to sort the GroupKey value.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.ColumnGroupDescription.SortGroupRecords">
            <summary>
            Gets or sets the value that indicates whether to sort the inner records of group while using custom grouping. 
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>        
            By default, grouped columns records are not sorted as the values of all the records in one group will be same. So, only groups will be sorted based on group key. 
            In custom grouping cases, grouped columns records value may differ. So in this case, you can sort the records of group by setting SortGroupRecords property to true. 
            </remarks>
        </member>
        <member name="T:Syncfusion.Data.ICollectionViewAdv">
            <summary>
            Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ISupportInitialize.BeginInit(System.Boolean)">
            <summary>
            Signals the object that initialization is starting.
            </summary>
            <param name="IsProgrammatic">The flag IsProgrammatic helps to resume the UI update while IsInDeferRefresh is true.</param>
        </member>
        <member name="M:Syncfusion.Data.ISupportInitialize.EndInit">
            <summary>
            Signals the object that initialization is complete.        
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ISupportIncrementalLoading">
            <summary>
            Specifies a calling contract for collection views that support incremental loading.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.Data.RecordEntry"/> for associated data object.
            </summary>
            <param name="data">The data object to create <see cref="T:Syncfusion.Data.RecordEntry"/>.</param>
            <returns>
            The <see cref="T:Syncfusion.Data.RecordEntry"/> for the specified data object.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.IPropertyAccessProvider"/> which handles the reflection for CollectionViewAdv.
            </summary>
            <returns>
            Returns the <see cref="T:Syncfusion.Data.IPropertyAccessProvider"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetItemProperties">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> to get the information of property.
            </summary>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.FilterRecord(System.Object)">
            <summary>
            Filters the record for the specified record condition.
            </summary>
            <param name="record">The record to filter the data.</param>
            <returns>
            <b>true</b> if the filter condition is satisfied; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.RefreshFilter(System.Boolean)">
            <summary>
            Refreshes the view when the filtering is applied through <see cref="M:Syncfusion.Data.ICollectionViewAdv.FilterRecord(System.Object)"/> delegate.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.GetRecordAt(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.RecordEntry"/> at the specified index.
            </summary>
            <param name="index">The index to get the record.</param>
            <returns>
            Returns the <see cref="T:Syncfusion.Data.RecordEntry"/> for the specified index.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.ICollectionViewAdv.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments.
            </summary>
            <param name="args">
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> contains the event data.
            </param>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsDynamicBound">
            <summary>
            Gets or sets the value that indicates whether the data object is <see cref="N:System.Dynamic"> dynamic</see>. 
            </summary>
            <value>
            <b>true</b> if the data object is dynamic; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsXElementBound">
            <summary>
            Gets or sets the value that indicates whether the data object is <see cref="T:System.Xml.Linq.XElement">XElement</see>.         
            </summary>
            <value>
            <b>true</b> if the data object is XElement; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.Records">
            <summary>
            Gets the records collection that are in view.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.IRecordsList"/> of records.
            </value>
            <remarks>
            When the <see cref="!:Syncfusion.UI.Xaml.Grid.GroupColumnDescription"/> are added, the groups are maintained in <see cref="P:Syncfusion.Data.TopLevelGroup.DisplayElements"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.TopLevelGroup"/> which maintains the group information when the <see cref="!:Syncfusion.UI.Xaml.Grid.GroupColumnDescription"/> is added into <see cref="!:Syncfusion.UI.Xaml.Grid.SfDataGrid.GroupColumnDescriptions"/> collection. 
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.TopLevelGroup"/> which maintains the group information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the group caption information.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the group caption information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SummaryRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the summary rows information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the summary rows information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains the table summary rows information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.ISummaryRow"/> which maintains table summary rows information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.GroupComparer">
            <summary>
            Gets or sets custom group <see cref="!:System.Collections.Generic.IComparer">comparer</see> to sort the group caption based on custom logic.
            </summary>
            <value>
            The <see cref="!:System.Collections.Generic.IComparer">comparer</see> which contains custom logic to sort the group caption.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SortComparers">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.SortComparers">SortComparers</see> to sort the data using custom logic.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.SortComparers">SortComparers</see> which contains the custom logic for sorting.
            </value>
        </member>
        <member name="E:Syncfusion.Data.ICollectionViewAdv.RecordPropertyChanged">
            <summary>
            Occurs when the property is changed for the data objects on the collection. 
            </summary>       
        </member>
        <member name="E:Syncfusion.Data.ICollectionViewAdv.SourceCollectionChanged">
            <summary>
            Occurs when the underlying collection is changed.
            </summary>
            <remarks>
            The data object should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsLegacyDataTable">
            <summary>
            Gets a value that indicates whether the underlying data object is <see cref="T:System.Data.DataTable"/>.
            </summary>
            <value>
            <b>true</b> if the underlying data object is DataTable; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the collection of <see cref="T:Syncfusion.Data.IFilterDefinition"/> to maintain the filtering information.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Data.IFilterDefinition"/> to maintain the filtering information.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.LiveDataUpdateMode">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Data.LiveDataUpdateMode"/> to control data manipulation operations during data updates.
            </summary>
            <value>
            One of the LiveDataUpdateMode that indicates how data manipulation operations are handled during data updates. 
            The default value is LiveDataUpdateMode.Default/&gt;.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.SummaryCalculationMode">
            <summary>
            Gets or sets a value that denotes the mode of calculation for caption and group summaries for improved performance. 
            </summary>
            <value>
            One of the CalculationMode that indicates when to perform the summary calculation.
            The default value is CalculationMode.Default/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.AutoExpandGroups">
            <summary>
            Gets or sets a value that indicates whether the group caption is expanded automatically during grouping.
            </summary>
            <value>
            <b>true</b> if the group caption is expanded automatically; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ICollectionViewAdv.IsInDeferRefresh">
            <summary>
            Gets a value that indicates whether the <see cref="!:System.ComponentModel.CollectionView.DeferRefresh"/> in action.
            </summary>
            <value>
            <b>true</b> if the <see cref="!:System.ComponentModel.CollectionView.DeferRefresh"/> in action; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Syncfusion.Data.IUnboundExpressionFunc.GetFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Custom Function to enable runtime customized objects over default operations other than LINQ queries.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IUnboundExpressionFunc.GetExpressionFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Custom expression function to enable runtime customized objects into LINQ queries.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGridViewNotifier.DetachGridView">
            <summary>
            Detach the grid instance present in the view while disposing the view and reusing
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGridViewNotifier.AttachGridView(System.Object)">
            <summary>
            Set dataGrid in view
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGridViewNotifier.GetDataGrid">
            <summary>
            Get dataGrid present in the view
            </summary>
            <returns>dataGrid</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetFirstItem">
            <summary>
            Returns first item from SourceCollection by enumeration.
            </summary>
            <returns>Returns first item from SourceCollection by enumeration.</returns>
            <remarks>If the source is IQueryable returns the first item by querying the SourceCollection.</remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates RecordEntry for specified data.
            </summary>
            <param name="data">The data to create RecordEntry.</param>
            <returns>Returns the RecordEntry for specified data.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetSourceType(System.Type)">
            <summary>
            Sets the SourceType from bound control. 
            </summary>
            <param name="sourceType">The sourceType.</param>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.KeyValue">
            <summary>
            Gets or Sets the KeyValue.
            </summary>
            <remarks>Entity query needs to be sorted when we use Skip. Query will be sorted if the KeyValue is not null or empty</remarks>
        </member>
        <member name="F:Syncfusion.Data.CollectionViewAdv.IsIQueryable">
            <summary>
            Gets or Sets the IsIQueryable.
            </summary>
            <remarks>if <b>True</b> records creation and data operation handled by query. otherwise handled by enumeration.</remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Returns the ItemPropertiesProvider.
            </summary>
            <returns>A collection of property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateItemPropertiesProvider">
            <summary>
            Creates the ItemProeprtiesProvider.
            </summary>
            <returns>Returns the collection of property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetItemProperties">
            <summary>
            Returns the default System.ComponentModel.PropertyDescriptorCollection.
            </summary>
            <returns>A collection of property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.SetItemProperties(System.Collections.IEnumerable)">
            <summary>
            Sets ItemProperties from specified dataSource.
            </summary>
            <param name="dataSource">The bound dataSource.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetInternalSource">
            <summary>
            Gets the list which internally stores the data in on-demand.
            </summary>
            <returns>Returns the list of records in view</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetSource">
            <summary>
            Returns the underlying collection from SfDataGrid.ItemsSource in the stored source property.
            </summary>
            <returns>source</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetSourceListCollection">
            <summary>
            Returns the SourceCollection as IList to handle the CRUD operations.
            </summary>
            <returns>Returns the SourceCollection as list.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh">
            <summary>
            Get a disposable DeferHelper to suspends the all data operations in View. 
            </summary>
            <returns>Returns disposable DeferHelper to do the bulk changes</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferRefresh(System.Boolean)">
            <summary>
            Get a disposable DeferHelper to suspends the all data operations in View. 
            </summary>
            <param name="IsProgrammatic">True to handle the UI update when do data operation pragmatically.</param>
            <returns>Returns disposable DeferHelper to do the bulk changes</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetItemAt(System.Int32)">
            <summary>
            Returns the item at specified index.
            </summary>
            <param name="index">The index to get the object.</param>
            <returns>Returns the item from Records or DisplayElements at specified index</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.BeginInit(System.Boolean)">
            <summary>
            Suspends the all data operations in View. 
            </summary>
            <param name="IsProgrammatic">The flag IsProgrammatic helps to resume the UI update while IsInDeferRefresh is true.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EndInit">
            <summary>
            Resumes the data operations and reinitialize the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CreateRecords">
            <summary>
            Creates the Records by RecordsList.
            </summary>
            <returns>Returns the collection of RecordEntry.</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.EnsureSourceList">
            <summary>
            Call this method in the derived CollectionView once the constructor is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.OnTopLevelGroupCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method actions are handled in RaiseGroupCollectionChanged and UpdateCollectionViewRecords. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.FilterRecord(System.Object)">
            <summary>
            Return false if Record passed the Filter conditions
            </summary>
            <param name="record">The record to be filtered.</param>
            <returns>Returns true when the record is filtered. otherwise false based on Filter</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Data.CollectionViewAdv.CanUpdateSummary(Syncfusion.Data.ISummaryRow,System.String)" -->
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetComparerIndex(System.Object,System.Int32)">
            <summary>
            Call this method when you need to find new the ComparedIndex of item based on Sorting
            </summary>
            <param name="record"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.AdjustBeforeAdd(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="record"></param>
            <param name="index"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummary(System.Object,System.String)">
            <summary>
            Update Table Summary for property changed cases.
            </summary>
            <param name="record"></param>
            <param name="propertyName"></param>        
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummary(System.Object,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Update Table summary for Add / Remove cases.
            </summary>
            <param name="record"></param>
            <param name="RecordAction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateSummaries(Syncfusion.Data.Group,System.Object,System.String)">
            <summary>
            Update group summaries for replace case
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="propertyName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateCaptionSummaries(Syncfusion.Data.Group,System.Object,System.String)">
            <summary>
            Update Caption summary for replace case
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="propertyName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateSummaries(Syncfusion.Data.Group,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Update Group Summaries for Add / Remove case.
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="RecordAction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateCaptionSummaries(Syncfusion.Data.Group,System.Object,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Update caption summary for Add / Remove case.
            </summary>
            <param name="group"></param>
            <param name="record"></param>
            <param name="RecordAction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateSummaryAdjustibleForGroup(Syncfusion.Data.Group,Syncfusion.Data.ISummaryAdjustible,Syncfusion.Data.SummaryValue,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update Summary for Group by Adjustable aggregate.
            </summary>
            <param name="group"></param>
            <param name="adjustible"></param>
            <param name="summaryValue"></param>
            <param name="RecordAction"></param>
            <param name="propertyName"></param>
            <param name="record"></param>
            <param name="_changedSummaryInfoDictionary"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.UpdateTableSummaryAdjustible(Syncfusion.Data.ISummaryAdjustible,Syncfusion.Data.SummaryValue,System.Collections.Specialized.NotifyCollectionChangedAction,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update Table Summary for Adjustable aggregate.
            </summary>
            <param name="adjustible"></param>
            <param name="summaryValue"></param>
            <param name="RecordAction"></param>
            <param name="propertyName"></param>
            <param name="record"></param>
            <param name="_changedSummaryInfoDictionary"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetRecordsCount(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Returns Records count for the given group.
            </summary>
            <param name="group">The Group that has Records.Count</param>
            <param name="count">The count has the value of total record in group.</param>
            <returns>Returns the records count in a specified group.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.CalculateTableSummary(Syncfusion.Data.SummaryRecordEntry,Syncfusion.Data.ISummaryColumn)">
            <summary>
            Calculate and aggregate summary value for given summary record entry.
            </summary>
            <param name="summaryRecordEntry"></param>
            <param name="summaryColumn"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Return func for corresponding Data operation and Property Name.
            </summary>
            <param name="propertyName">Property Name</param>
            <param name="operation">Data operation</param>
            <param name="reflectionMode">Data Reflection mode</param>
            <returns>Func</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetExpressionFunc(System.String,Syncfusion.Data.DataOperation,Syncfusion.Data.DataReflectionMode)">
            <summary>
            Return ExpressionFunc for corresponding Dataoperation and Property Name.
            </summary>
            <param name="propertyName">propertyName</param>
            <param name="operation">Data operation</param>
            <param name="reflectionMode">Reflection Mode</param>
            <returns>ExpressionFunc</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetDisplayValueFunc(System.String,Syncfusion.Data.DataOperation)">
            <summary>
            Get DisplayValue func for corresponding Data operation and Property Name.
            </summary>
            <param name="propertyName">property Name</param>
            <param name="operation">Data operation</param>
            <returns>DisplayValueFunc</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetDisplayValueExpressionFunc(System.String,Syncfusion.Data.DataOperation)">
            <summary>
            Get DisplayValue Expression func for corresponding Data operation and Property Name.
            </summary>
            <param name="propertyName">propertyName</param>
            <param name="operation">Data operation</param>
            <returns>DisplayValue ExpressionFunc</returns>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DetachGridView">
            <summary>
            Need to detach the grid instance present in the view while disposing the view
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.AttachGridView(System.Object)">
            <summary>
            Set dataGrid in view
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.GetDataGrid">
            <summary>
            Get dataGrid present in the view
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.FetchSize">
            <summary>
            Gets or sets the value that indicates the number of records to be fetched.
            </summary> 
             /// <value>The value that indicates the number of records to be fetched.The default value is 50.</value>
            <remarks>        
            In CustomDataVirtualization, creates records based on default fetchsize value when source list is set as null
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsDynamicBound">
            <summary>
            Gets a value indicating whether this instance is dynamic bound.
            </summary>
            <value>
            	<c>true</c> if this instance is dynamic bound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Records">
            <summary>
            Gets the list of RecordEntry that ensured from source.
            </summary>                
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Data.CollectionViewAdv.EnableSummaryOptimization" -->
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsInDeferRefresh">
            <summary>
            Get whether view is in DeferRefresh
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsGrouping">
            <summary>
            Gets a value that indicates whether the source have grouped.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.GroupList">
            <summary>
            Gets the TopLevelGroup as IGroupList to handle the Add/Remove operations.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the TopLevelGroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets a value that indicates the existence of CaptionSummaryRow.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SummaryRows">
            <summary>
            Gets the list of SummaryRow.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the list of TableSummaryRow.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SortComparers">
            <summary>
            Gets a SortComparer to apply the custom logic on sorting.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.GroupComparer">
            <summary>
            Gets or sets the GroupComparer to apply custom logic on Grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SourceType">
            <summary>
            Gets the value that indicates the SourceType of bound source.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.IsLegacyDataTable">
            <summary>
            Gets a value indicating whether this instance is legacy data table.
            </summary>
            <value>
            	<c>true</c> if this instance is legacy data table; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.ItemProperties">
            <summary>
            Gets the item properties.
            </summary>
            <value>The item properties.</value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Culture">
            <summary>
            Gets or sets the value to apply sorting based on Culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.Filter">
            <summary>
            Gets or sets the func to apply custom filter on source.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the value that creates RowFilter.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.GroupDescriptions">
            <summary>
            Gets a value that contains the collection of GroupDescription.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SortDescriptions">
            <summary>
            Gets a value that contains the collection of SortDescription.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SourceCollection">
            <summary>
            Gets the underlying bound source.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.SummaryCalculationMode">
            <summary>
            Gets or sets a value that denotes the mode of calculation for caption and group summaries for improved performance. 
            </summary>
            <value>
            One of the <see cref="!:Syncfusion.UI.Xaml.Grid.CalculationMode"/> that indicates when to perform the summary calculation.
            The default value is<see cref="!:Syncfusion.UI.Xaml.Grid.CalculationMode.Default"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.CollectionViewAdv.NotificationSubscriptionMode">
            <summary>
            Gets or Sets a value that indicate whether source collection items can listen the NotifyPropertyChanging/Changed events.
            </summary>
            
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferHelper.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv.DeferHelper"/> class.
            </summary>            
        </member>
        <member name="M:Syncfusion.Data.CollectionViewAdv.DeferHelper.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.CollectionViewAdv.DeferHelper"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.NotifyCollectionChangedEventArgsExt">
            <summary>
            Class that represents the NotifiCollectionChangedEventArgs with IsProgrammatic flag to decide the selection and UI update.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.NotifyCollectionChangedEventArgsExt.IsProgrammatic">
            <summary>
            Gets or sets a value that indicates whether the refresh processing internally or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.DataOperation">
            <summary>
            Defines the constants for specifying different data operations performed in CollectionViewAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Default">
            <summary>
            Denotes the data operation other than sorting, grouping, filtering and summary calculation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Sorting">
            <summary>
            Denotes the sorting operation is being performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Grouping">
            <summary>
            Denotes the grouping operation is being performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Filtering">
            <summary>
            Denotes the filtering operation is being performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataOperation.Summary">
            <summary>
            Denotes the summary calculation operation is being performed.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.DataReflectionMode">
            <summary>
            Defines the constants for specifying different data mode performed in View.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataReflectionMode.Default">
            <summary>
            Data operations are based on Mapping Name.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataReflectionMode.Display">
            <summary>
            Data operations are based on display binding value.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.DataReflectionMode.Value">
            <summary>
            Data operations are based on ValueBinding.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.NotificationSubscriptionMode">
            <summary>
            Defines the constants that specify whether need to listen the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events of data object and <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event of SoureCollection.
            and CollectionChanged event.
            </summary> 
        </member>
        <member name="F:Syncfusion.Data.NotificationSubscriptionMode.None">
            <summary>
            Denotes <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/>, <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>  and <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events will not be listened.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.NotificationSubscriptionMode.CollectionChange">
            <summary>
            Denotes view listens the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event of SoureCollection.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.NotificationSubscriptionMode.PropertyChange">
            <summary>
            Denotes view listens the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events of data object.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DataTableCollectionView.GetGroupFunc(System.String)">
            <summary>
            Get the Group func for CustomGrouping
            </summary>
            <param name="propertyName">Column</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Data.DataTableCollectionView.RowFilter">
            <summary>
            Gets or sets the expression used to filter which rows are viewed in the DataView.
            </summary>
            <value>
            Filter string to process the filter in DataView.
            </value>
        </member>
        <member name="T:Syncfusion.Data.IGroupList">
            <summary>
            Interface that exposes method to the TopLevelGroup for Add / Remove / Contains /
            IndexOf methods with the underlying bound object.
            </summary>
            <remarks>
            This interface will only interact with the underlying bound object that can be
            found in RecordEntry.Data.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Add(System.Object,System.Boolean)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
            <param name="isInSourceCollectionChange"></param>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Insert(System.Object,System.Int32,System.Boolean)">
            <summary>
            Insert the record in the specified position.
            </summary>
            <param name="record">The record.</param>
            <param name="index"></param>
            <param name="isInSourceCollectionChange"></param>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified record.
            </summary>
            <param name="record">The record.</param>
            <param name="isInSourceCollectionChange"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.Contains(System.Object)">
            <summary>
            Determines whether the record is found in the DisplayElements of the TopLevelGroup.
            </summary>
            <param name="record">The record.</param>
            <returns>
            	<c>true</c> if [contains] [the specified record]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.IGroupList.IndexOf(System.Object)">
            <summary>
            Finds the index of the record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.#ctor(Syncfusion.Data.TopLevelGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.GroupDisplayElements"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>        
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.IndexOf(Syncfusion.Data.NodeEntry)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.IndexOf(System.Object)">
            <summary>
            Gets the index of specified item from Groups.
            </summary>
            <param name="item"></param>
            <returns>Returns the index of specified item</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.GetItem(System.Object)">
            <summary>
            Gets the node entry by specified item.
            </summary>
            <param name="item"></param>
            <returns>Returns the NodeEntry for specified item. </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Insert(System.Int32,Syncfusion.Data.NodeEntry)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Add(Syncfusion.Data.NodeEntry,System.Boolean)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="isInSourceCollectionChange"></param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Contains(Syncfusion.Data.NodeEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.CopyTo(Syncfusion.Data.NodeEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.Remove(Syncfusion.Data.NodeEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.RemoveNode(Syncfusion.Data.NodeEntry,System.Boolean,System.Int32@,System.Collections.Generic.List{Syncfusion.Data.NodeEntry}@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="isInSourceCollectionChange"></param>
            <param name="startIndex"></param>
            <param name="changedItems"></param>
            <param name="canremove">Denotes whether to remove the group or not. If it is the only record/group (including non visible) then can remove is true</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.GroupDisplayElements.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.TopLevelGroup">
            <summary>
            Gets or sets the top level group.
            </summary>
            <value>The top level group.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:Syncfusion.WinRT.Data.NodeEntry"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupDisplayElements.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.NamespaceDoc">
            <summary>
            Provides classes and interface to process the data related operation like sorting,
            grouping and filtering for different IEnumerable collections.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.GroupEntry">
            <summary>
            GroupEntry contains the list of groups for each sub-groups populated for the <see cref="T:Syncfusion.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.NodeEntry">
            <summary>
            NodeEntry is the base class for the Grouping data structure used by <see cref="T:Syncfusion.Data.ICollectionViewAdv"/> interface. It exposes some base level
            details for the derived constructs to use.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.NodeEntry"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Data.NodeEntry"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NodeEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.IsGroups">
            <summary>
            Gets or sets a value indicating whether this instance is groups.
            </summary>
            <value><c>true</c> if this instance is groups; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Data.NodeEntry.IsRecords">
            <summary>
            Gets or sets a value indicating whether this instance is records.
            </summary>
            <value>
            	<c>true</c> if this instance is records; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Data.GroupEntry.#ctor(Syncfusion.Data.GroupEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.GroupEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupEntry.ToSummaryArray">
            <summary>
            returns an array of SummaryDetails for each group.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Data.GroupEntry.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="M:Syncfusion.Data.Group.#ctor(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.Group"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.OnGroupExpanded">
            <summary>
            Called when group.IsExpanded = true;.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.OnGroupCollapsed">
            <summary>
            Called when group.IsExpanded = false;.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Data.Extensions.GroupResult})">
            <summary>
            Populates the specified groups to populate.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <returns>Returns the total number of entries.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Data.Extensions.GroupResult},System.Collections.Generic.List{Syncfusion.Data.Group},Syncfusion.Data.Group,System.Int32)">
            <summary>
            Populates the specified groups to populate.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <param name="groups">The groups.</param>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <returns>Returns the total number of entries in TopLevelGroup.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateNewGroup(Syncfusion.Data.Group,Syncfusion.Data.Extensions.GroupResult,System.Int32)">
            <summary>
            Creates the new group.
            </summary>
            <param name="parent">The parent.</param>
            <param name="groupResult">The group result.</param>
            <param name="level">The level.</param>
            <returns>Returns the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateNewGroup(Syncfusion.Data.Group,System.Object,System.Int32)">
            <summary>
            Creates the new group.
            </summary>
            <param name="parent">The parent.</param>
            <param name="key">The key.</param>
            <param name="level">The level.</param>
            <returns>Returns the group.</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateDetailsForRecords(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Creates the details for records.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateDetailsForRecords(Syncfusion.Data.Group,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Creates the details for records.
            </summary>
            <param name="parent">The parent.</param>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.CreateDetailsForGroups(System.Int32)">
            <summary>
            Creates the details for groups.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.Group.SetDirty">
            <summary>
            Sets the dirty. When this is set to true, the YAmountCache will be re-computed for the whole group structure.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Group.GetYAmountCache">
            <summary>
            Each group knows the exact height of its child nodes. The YAmountCache returns the y height of each group based on its inner node levels.and their expanded states
            </summary>
            <returns>Calculated YAmount</returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetSourceYAmountCache">
            <summary>
            Gets the source Y amount cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetParentYAmountCache">
            <summary>
            Gets the parent Y amount cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRecordCount">
            <summary>
            Gets the record count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetRelationsCount">
            <summary>
            Gets the relations count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetGroupsCount">
            <summary>
            Gets the groups count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Group.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.Group.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.Group.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Key">
            <summary>
            Gets or sets the key for the Group.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>The items count.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.Group.IsBottomLevel">
            <summary>
            Gets or sets a value indicating whether this instance is bottom level. Bottom-Level group will have the list of records for the Group.
            </summary>
            <value>
            	<c>true</c> if this instance is bottom level; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.Group.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            	<c>true</c> if this instance is top level group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.Group.Details">
            <summary>
            Gets or sets the details for this group. This could be Groups / Records collection.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Records">
            <summary>
            Gets the records when Group.Details is list of records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Data.Group.Groups">
            <summary>
            Gets the groups when Group.Details is list of Groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="E:Syncfusion.Data.Group.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.Data.Group.SummaryDetails">
            <summary>
            Contains summary record for this group
            </summary>
        </member>
        <member name="T:Syncfusion.Data.GroupComparer">
            <summary>
            IComparer implemented for <see cref="T:Syncfusion.Data.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupComparer.Compare(Syncfusion.Data.Group,Syncfusion.Data.Group)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.#ctor(Syncfusion.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.DisplayElementEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>        
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.DisplayElementEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Data.DisplayElementEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.Data.DisplayElementEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.DisplayElementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.GroupEnumerator">
            <summary>
            Enumerates any <see cref="P:Syncfusion.Data.GroupEnumerator.Group"/> class and lists out all the elements in a one-dimensional array.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.#ctor(Syncfusion.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.GroupEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.GroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Data.GroupEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.GroupEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.GroupingExtensions">
            <summary>
            Extensions for <see cref="T:Syncfusion.Data.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.ExpandAllAtLevel(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Expands all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.CollapseAllAtLevel(Syncfusion.Data.Group,System.Int32)">
            <summary>
            Collapses all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.ExpandAll(Syncfusion.Data.Group)">
            <summary>
            Expands all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.CollapseAll(Syncfusion.Data.Group)">
            <summary>
            Collapses all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupingExtensions.GetTopLevelGroup(Syncfusion.Data.NodeEntry)">
            <summary>
            Gets the top level group.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.GroupRecordEntry">
            <summary>
            Contains a list of records with its related summaries and unfiltered records. The <see cref="T:Syncfusion.Data.Group"/> class uses
            GroupRecordEntry if the group.IsBottomLevel = true;.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.GroupRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32,System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.GroupRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="source">The source.</param>
            <param name="filterPredicate">The filterpredicate</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.PopulateRecords(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Populates the records.
            </summary>
            <param name="source">The source.</param>
            <param name="filterPredicate">The filter predicate.</param>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.CreateRecord(System.Object)">
            <summary>
            Creates the record.
            </summary>
            <param name="data">The data  to creeate the RecordEntry.</param>
            <returns>Returns the RecordEntry for the underlying data.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.GetRecordsCount">
            <summary>
            Gets the records count.
            </summary>
            <returns>Returns the Records.Count.</returns>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.GetRelationsCount">
            <summary>
            Gets the relations count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.GroupRecordEntry.ToArray">
            <summary>
            Returns the underlying objects array from the record entries.
            </summary>
            <returns>Returns the Source as array.</returns>
        </member>
        <member name="P:Syncfusion.Data.GroupRecordEntry.UnfilteredRecords">
            <summary>
            Gets the unfiltered records.
            </summary>
            <value>The unfiltered records.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupRecordEntry.Records">
            <summary>
            Gets or sets the records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Data.GroupRecordEntry.Summaries">
            <summary>
            Gets the summaries for the bottom level records.
            </summary>
            <value>The summaries.</value>
        </member>
        <member name="T:Syncfusion.Data.RecordEntry">
            <summary>
            Contains the underlying business object bound to <see cref="T:Syncfusion.Data.ICollectionViewAdv"/> instance. 
            Nested records can be specified / controlled using the PopulateChildView method.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.RecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.OnExpanded">
            <summary>
            Called when RecordEntry.IsExpanded = true;
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.OnCollapsed">
            <summary>
            Sets IsExpanded = false without any calls to the events or overrides.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.PopulateChildView(Syncfusion.Data.ICollectionViewAdv,System.Int32,System.String)">
            <summary>
            Populates the child view.
            </summary>
            <param name="collectionView">The collection view.</param>
            <param name="level">The level.</param>
            <param name="relationName">Name of the relation.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordEntry.PopulateChildView(Syncfusion.Data.ICollectionViewAdv,System.Int32,System.String,System.Boolean)">
            <summary>
            Populates the child view.
            </summary>
            <param name="collectionView">The collection view.</param>
            <param name="level">The level.</param>
            <param name="relationName">Name of the relation.</param>
            <param name="isNestedExpanded">to determine nested record needs to expand or not</param>
        </member>
        <member name="P:Syncfusion.Data.RecordEntry.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Syncfusion.Data.RecordEntry.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.RecordEntry.ChildViews">
            <summary>
            Gets or sets the child views.
            </summary>
            <value>The child views.</value>
        </member>
        <member name="T:Syncfusion.Data.NestedRecordEntry">
            <summary>
            Contains a list of nested records for each <see cref="!:Syncfusion.Windows.Data.RecordEntry"/> and nested <see cref="T:Syncfusion.Data.ICollectionViewAdv"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.NestedRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.NestedRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.NestedRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.NestedLevel">
            <summary>
            Gets or sets the nested level.
            </summary>
            <value>The nested level.</value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.IsNestedLevelExpanded">
            <summary>
            Gets or sets a value indicating whether nested record is expanded.
            </summary>
            <value>
            	<c>true</c> if nested record is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.NestedRecords">
            <summary>
            Gets the nested records.
            </summary>
            <value>The nested records.</value>
        </member>
        <member name="P:Syncfusion.Data.NestedRecordEntry.ExpandedLevel">
            <summary>
            Gets or sets the level up to which record is expanded
            </summary>
            ExpandedLevel is set while calling ExpandAllDetailsView method and reset when records are expanded/collapsed individually
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index for the underlying record.
            </summary>
            <param name="data">The data.</param>
            <returns>Returns the index of specified data</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.GetSource">
            <summary>
            Returns the SourceList.
            </summary>
            <returns>Returns the list of SourceList.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.GetRecordEntry(System.Int32,System.Object)">
            <summary>
            Returns the RecordEntry by specified recordIndex.
            </summary>
            <param name="data">The data to get the RecordEntry.</param>
            <param name="recordIndex">The recordIndex to get the RecordEntry.</param>
            <returns>Returns the RecordEntry based on recordIndex or data.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsEntryList.GetRecord(System.Object)">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.RecordEntry"/> for the underlying business object.
            </summary>
            <param name="data">The data to get the RecordEntry.</param>
            <returns>Returns the RecordEntry based on data.</returns>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources.
            </summary>
            <param name="isDisposing">decides whether to dispose the elements or not.</param>
        </member>
        <member name="M:Syncfusion.Data.ListIndexer`1.Find(System.Object)">
            <summary>
            Finds the location of item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Data.RecordsListBase.Query">
            <summary>
            Stores the source as query when <see cref="F:Syncfusion.Data.CollectionViewAdv.IsIQueryable"/> is true.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.OnInitialize">
            <summary>
            Initialize the internalList and indicesList collection.
            </summary>
            <remarks>
            The indicesList will not be initialized in VirtualRecordsList
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetRecord(System.Object)">
            <summary>
            Gets the <see cref="!:Syncfusion.Windows.Data.RecordEntry"/> for the underlying business object.
            </summary>
            <param name="data">The data to get the RecordEntry.</param>
            <returns>Returns the RecordEntry for the data.</returns>        
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.IndexOfRecord(System.Object)">
            <summary>
            Returns the index for the underlying record.
            </summary>
            <param name="data">The data to get the index.</param>
            <returns>Returns the index of specified data.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetSource">
            <summary>
            Returns the list of data from RecordEntry collection.
            </summary>
            <remarks>
            Returns the list of data from SourceList<see cref="F:Syncfusion.Data.VirtualRecordsList.SourceList"/>.
            </remarks>                
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.IndexOf(Syncfusion.Data.RecordEntry)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Add(Syncfusion.Data.RecordEntry)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Clear">
            <summary>
            Clears the entries internalList.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Contains(Syncfusion.Data.RecordEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.CopyTo(Syncfusion.Data.RecordEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Remove(Syncfusion.Data.RecordEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.RecordsListBase"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.RecordsListBase.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.RecordsListBase"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>                        
        </member>
        <member name="P:Syncfusion.Data.RecordsListBase.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Data.RecordsListBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.ISummaryExpressionAggregate">
            <summary>
            Defines method to calculate the summary for expression fields.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ISummaryAggregate">
            <summary>
            Defines common functionality for a custom aggregate function implementation.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ISummaryAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the custom aggregate for the specified summary column.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.ISummaryExpressionAggregate.CalculateAggregateExpressionFunc">
            <summary>
            Calculates the aggregate expression func.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.ISummaryAdjustible">
            <summary>
            Defines method to calculate the summary in optimized way during data updates.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ISummaryAggregateForGroup.CalculateAggregateFuncForGroup">
            <summary>
            Calculates the aggregate func.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.ISummaryParallelizable">
            <summary>
            Implement this interface to know if the Summary expressions can use PLINQ
            </summary>
        </member>
        <member name="T:Syncfusion.Data.DataTableAggregator">
            <summary>
            <code lang="C#">internal class GridDataTableCountAggregate :
            GridDataTableAggregator, ISummaryAggregate
                {
                    public GridDataTableCountAggregate(DataTable table)
                        : base(table)
                    {
                    }</code>
            <para></para>
            <para></para>
            <para></para>        public int Count 
            <para></para>
            <para></para>        { 
            <para></para>
            <para></para>            get; 
            <para></para>
            <para></para>            set; 
            <para></para>
            <para></para>        } 
            <para></para>
            <para></para>
            <para>      <code lang="C#">  #region IGridDataSummaryAggregate Members
            </code></para>
            <para></para>
            <para></para>
            <para></para>        public Action&lt;IEnumerable, string,
            PropertyDescriptor&gt; CalculateAggregateFunc() 
            <para></para>
            <para></para>        { 
            <para></para>
            <para></para>            return (items, property, pd) =&gt; 
            <para></para>
            <para></para>            { 
            <para></para>
            <para></para>                var table = this.GetClonedTable(items); 
            <para></para>
            <para></para>                if (pd.Name == &quot;Count&quot;) 
            <para></para>
            <para></para>               <code lang="C#"> { </code>
            <para></para>
            <para></para>                    this.Count =
            (int)table.Compute(string.Format(&quot;Count({0})&quot;, property),
            string.Empty); 
            <para></para>
            <para></para>                } 
            <para></para>
            <para></para>            }; 
            <para></para>
            <para></para>        } 
            <para></para>
            <para></para>
            <para></para>        #endregion 
            <para></para>
            <para></para>    }
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.DataTableAggregator.GetClonedTable(System.Collections.IEnumerable,System.Data.DataTable)">
            <summary>
            Create DataTable with IEnumerable items by cloning dataTable
            </summary>
            <param name="items"></param>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.SummaryRecordEntry">
            <summary>
            Contains the list of Summary aggregates computed using <see cref="T:Syncfusion.Data.ISummaryRow"/> instance in this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SummaryRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.SummaryRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Data.SummaryRecordEntry.Reset">
            <summary>
            Release The Unmanaged Calculated Summary Values on the on demand Condition
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SummaryRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Syncfusion.Data.SummaryRecordEntry.NeedToCalculate">
            <summary>
            initialze the field for the OnDemandMode Calculation Operation
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SummaryRecordEntry.SummaryValues">
            <summary>
            Gets the summary values.
            </summary>
            <value>The summary values.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryRecordEntry.SummaryRow">
            <summary>
            Gets or sets the summary row.
            </summary>
            <value>The summary row.</value>
        </member>
        <member name="T:Syncfusion.Data.SummaryValue">
            <summary>
            Instance to cache the summary aggregate values into the <see cref="T:Syncfusion.Data.SummaryRecordEntry"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SummaryValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.SummaryValue"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SummaryValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Data.SummaryValue.AggregateValues">
            <summary>
            Gets or sets the aggregate values.
            </summary>
            <value>The aggregate values.</value>
        </member>
        <member name="T:Syncfusion.Data.ISummaryRow">
            <summary>
            Defines common functionality for a GridSummaryRow for displaying the summary value.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.ShowSummaryInRow">
            <summary>
            Gets or sets a value indicating whether [show summary in row].
            </summary>
            <value><c>true</c> if [show summary in row]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.SummaryColumns">
            <summary>
            Gets the summary columns.
            </summary>
            <value>The summary columns.</value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryRow.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Syncfusion.Data.ISummaryColumn">
            <summary>
            Defines common functionality for <see cref="!:Syncfusion.UI.Xaml.Grid.GridSummaryColumn"/> for calculating and displaying the summary value.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.CustomAggregate">
            <summary>
            Gets or sets the instance of <see cref="!:Syncfusion.UI.Xaml.Grid.ISummaryAggregate"/> to implement the custom summary.
            </summary>
            <value>
            An instance of <see cref="!:Syncfusion.UI.Xaml.Grid.ISummaryAggregate"/>. The default value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.Format">
            <summary>
            Gets or sets the string that indicates how the summary value is formatted in display.
            </summary>
            <value>
            A string that specifies the format of summary value.The default value is <c>string.Empty</c>.
            </value>
            <example>
            	<code lang="C#"><![CDATA[        
             this.dataGrid.TableSummaryRows.Add(new GridSummaryRow()
             {
                Name="Total Products",
                ShowSummaryInRow = true,
                Title = "Total Products Count: {ProductCount}",
                SummaryColumns = new ObservableCollection<ISummaryColumn>()
                {
                    new GridSummaryColumn()
                    {
                        Name="ProductCount",
                        MappingName="ProductName",
                        SummaryType=SummaryType.CountAggregate,
                        Format="{Count:d}"
                    },
                }
            });
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.MappingName">
            <summary>
            Gets or sets the corresponding <see cref="!:Syncfusion.UI.Xaml.Grid.GridColumn.MappingName"/> of the column.
            </summary>
            <value>
            A string that specifies the valid mapping name of column. The default value is <c>string.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.Name">
            <summary>
            Gets or sets the name of summary column.
            </summary>
            <value>
            A string that specifies the name of the summary column. The default value is <c>string.Empty</c>.
            </value>
            <remarks>
            The name of the summary column and <see cref="!:Syncfusion.UI.Xaml.Grid.GridSummaryRow.Title"/> should be same for displaying summary value with title.
            </remarks>
            <example>
            	<code lang="C#"><![CDATA[       
            	//Here, the Title and Name have the same ProductCount string.
                this.dataGrid.TableSummaryRows.Add(new GridSummaryRow()
                {
                    Name="Total Products",
                    ShowSummaryInRow = true,
                    Title = "Total Products Count: {ProductCount}",
                    SummaryColumns = new ObservableCollection<ISummaryColumn>()
                    {
                        new GridSummaryColumn()
                        {
                            Name="ProductCount",
                            MappingName="ProductName",
                            SummaryType=SummaryType.CountAggregate,
                            Format="{Count:d}"
                        },
                    }
                });    
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Data.ISummaryColumn.SummaryType">
            <summary>
            Gets or sets the aggregate type for summary calculation.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.SummaryType"/> enumeration to specifies aggregate type. The default value is <see cref="F:Syncfusion.Data.SummaryType.CountAggregate"/>.
            </value>
        </member>
        <member name="T:Syncfusion.Data.SummaryType">
            <summary>
            Defines the constants that specify the types of summary aggregate supported in SfDataGrid.
            </summary>   
        </member>
        <member name="F:Syncfusion.Data.SummaryType.CountAggregate">
            <summary>
            Specify the count aggregate for the summary column.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryType.DoubleAggregate">
            <summary>
            Specify the Double value aggregate for the summary column.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryType.Int32Aggregate">
            <summary>
            Specify integer value aggregate for the summary column.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.SummaryType.Custom">
            <summary>
            Specify custom aggregate for the summary column which implement <see cref="T:Syncfusion.Data.ISummaryAggregate"/> or <see cref="T:Syncfusion.Data.ISummaryExpressionAggregate"/> interface to delegate the summary computation.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.TopLevelGroup">
            <summary>
            TopLevelGroup is the first-level of the Groups present in <see cref="T:Syncfusion.Data.ICollectionViewAdv"/>. It maintains the data structure for Grouping with <see cref="T:Syncfusion.Data.ICollectionViewAdv"/>. Iterate the DisplayElements property to get one-to-one mapping of the index with the TopLevelGroup items. Access all the Bottom-level and other nested level groups with the Groups property.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IGroupRefresh">
            <summary>
            Implement this interface to control refresh done with the <see cref="T:Syncfusion.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGroupRefresh.RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGroupRefresh.RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IGroupRefresh.DeferRefresh">
            <summary>
            returns an IDisposable object to specify controlled updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.#ctor(Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.TopLevelGroup"/> class.
            </summary>
            <param name="collectionView">The collection view.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Invalidate(System.Int32,System.Int32)">
            <summary>
            Invalidates the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Syncfusion#Data#IGroupRefresh#RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Syncfusion#Data#IGroupRefresh#RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.SuspendEvents">
            <summary>
            Suspends the events.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.ResumeEvents">
            <summary>
            Resumes the events.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Syncfusion#Data#IGroupRefresh#DeferRefresh">
            <summary>
            returns an IDisposable object to specify controlled updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Add(System.Object,System.Boolean)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.Contains(System.Object)">
            <summary>
            Determines whether the record is found in the DisplayElements of the TopLevelGroup.
            </summary>
            <param name="record">The record.</param>
            <returns>
            	<c>true</c> if [contains] [the specified record]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.IndexOf(System.Object)">
            <summary>
            Finds the index of the record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.ResetDisplayElements">
            <summary>
            Resets the display elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetMaxLevel">
            <summary>
            Gets the max level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetGroupCaptionText(Syncfusion.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
            <param name="groupSpecifierText">The group specifier text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.GetGroupCaptionTextList(Syncfusion.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
            <param name="groupSpecifierText">The group specifier text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateCaptionSummaries">
            <summary>
            Updates the caption summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateCaptionSummariestoTopLevelGroup(Syncfusion.Data.Group)">
            <summary>
            Update Caption summary from given group to first parent group.
            </summary>
            <param name="group"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateSummaries(Syncfusion.Data.Group)">
            <summary>
            Updates the summaries for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.UpdateSummaries(Syncfusion.Data.Group,Syncfusion.Data.SummaryRecordEntry)">
            <summary>
            Updates the summaries for the specified <see cref="T:Syncfusion.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            	<c>true</c> if this instance is top level group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.RelationsCount">
            <summary>
            Gets or sets the relations count.
            </summary>
            <value>The relations count.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.CollectionView">
            <summary>
            Gets the collection view.
            </summary>
            <value>The collection view.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.GroupDescriptions">
            <summary>
            Gets the group descriptions.
            </summary>
            <value>The group descriptions.</value>
        </member>
        <member name="P:Syncfusion.Data.TopLevelGroup.DisplayElements">
            <summary>
            Gets the <see cref="T:Syncfusion.Data.GroupDisplayElements"/> which contains the group and record infomation.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Data.GroupDisplayElements"/>.
            </value>
            <remarks>
            The group and record can accessed from DisplayElements when the data is grouped.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.DeferHelper.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.TopLevelGroup.DeferHelper"/> class.
            </summary>            
        </member>
        <member name="M:Syncfusion.Data.TopLevelGroup.DeferHelper.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.TopLevelGroup.DeferHelper"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.NotifyGroupsChangedEventArgs">
            <summary>
            NotifyGroupsChangedEventArgs passe collection change notification from TopLevelGroup to CollectionViewAdv 
            and Entries keys the changes items list of type NodeEntry. So no need to typecast in CollectionViewAdv for performance reasons.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.NotifyGroupsChangedEventArgs.Entries">
            <summary>
            The items affected by the change.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.SetValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useValueBinding">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useValueBinding">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.IPropertyAccessProvider.Dispose">
            <summary>
            Disposes PropertyAccessProvider
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.FilterPredicates">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.FilterBehavior">
            <summary>
            Gets or sets the Filter behavior for the column.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.ColumnMemberType">
            <summary>
            Gets or sets the type of the column.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IFilterDefinition.ColumnFilter">
            <summary>
            Gets or sets a value that decides whether to filter based on display value or based on MappingName. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Data.ColumnFilter"/> enumeration that decides how the items populated for the filter control in the column. 
            By default, the filter value is populated based on <see cref="!:Syncfusion.UI.Xaml.Grid.GridColumn.DisplayBinding"/> property. 
            </value>     
        </member>
        <member name="T:Syncfusion.Data.FilterPredicate">
            <summary>
            Holds values for Filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.FilterPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Data.FilterPredicate"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterBehavior">
            <summary>
            Gets or sets the type of the filter behavior.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Data.FilterPredicate.FilterMode">
            <summary>
             Gets or sets a value indicating whether Filter is based on DisplayText.
            </summary>
            <value>
            	<c>ColumnFilter.DisplayText</c> if Filter is based on DisplayText; otherwise, <c>ColumnFilter.Value</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Data.PredicateType">
            <summary>
            Predicate type defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.AndAlso">
            <summary>
            Does an ANDALSO operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.PredicateType.OrElse">
            <summary>
            Does an ORELSE operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.FilterOperatorType">
            <summary>
            Default Filter Operator is defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterOperatorType.Equals">
            <summary>
            Does an Equals operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterOperatorType.StartsWith">
            <summary>
            Does an StartsWith operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterOperatorType.Contains">
            <summary>
            Does an Contains operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ItemPropertiesProvider">
            <summary>
            Implements <see cref="T:Syncfusion.Data.IPropertyAccessProvider"/> to Get / Set value on the underlying object which is used by <see cref="T:Syncfusion.Data.CollectionViewAdv"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="property">Name of the prop.</param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns> return the  Formatted value based on property and record</returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetDisplayValue(System.Object,System.String,System.Boolean)">
            <summary>
            Get the Display value of corresponding Property name and record
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="canUseBindingReflection">if true then use Binding reflection to get the display value</param>
            <returns>return the Display value based on property name and record</returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.SetValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">value</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.ItemPropertiesProvider"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.ItemPropertiesProvider.OnBeginReflect">
            <summary>
            Initialize the fields
            </summary>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Get value from dynamic record
            </summary>
            <param name="record">record</param>
            <param name="propName">property name</param>
            <returns>value</returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.SetValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">value</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.DynamicPropertiesProvider"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.GetDisplayValue(System.Object,System.String,System.Boolean)">
            <summary>
            Get the Display value of corresponding Property name and record
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="canUseBindingReflection">if true then use Binding reflection to get the display value</param>
            <returns>return the Display value based on property name and record</returns>
        </member>
        <member name="M:Syncfusion.Data.DynamicPropertiesProvider.OnBeginReflect">
            <summary>
            Initialize the fields
            </summary>
        </member>
        <member name="M:Syncfusion.Data.XMLAttributesProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Data.XMLAttributesProvider.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.XMLAttributesProvider.SetValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.XMLAttributesProvider.GetDisplayValue(System.Object,System.String,System.Boolean)">
            <summary>
            Get the Display value of corresponding Propertyname and record
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="canUseBindingReflection">if true then use Binding reflection to get the display value</param>
            <returns>return the Display value based on proeprty name and record</returns>
        </member>
        <member name="M:Syncfusion.Data.XMLAttributesProvider.OnBeginReflect">
            <summary>
            Initialize the fields
            </summary>
        </member>
        <member name="M:Syncfusion.Data.XElementAttributesProvider.GetFormattedValue(System.Object,System.String)">
            <summary>
            Gets the Formatted value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
            
        </member>
        <member name="M:Syncfusion.Data.XElementAttributesProvider.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.XElementAttributesProvider.SetValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="useBindingValue">If true,then use binding value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.XElementAttributesProvider.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.XElementAttributesProvider"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>  
        </member>
        <member name="M:Syncfusion.Data.XElementAttributesProvider.GetDisplayValue(System.Object,System.String,System.Boolean)">
            <summary>
            Get the Display value of corresponding property name and record
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="canUseBindingReflection">if true then use Binding reflection to get the display value</param>
            <returns>return the Display value based on property name and record</returns>
        </member>
        <member name="M:Syncfusion.Data.XElementAttributesProvider.OnBeginReflect">
            <summary>
            Initialize the fields
            </summary>
        </member>
        <member name="T:Syncfusion.Data.IParallelizableView">
            <summary>
            Implement this interface to instruct the QueryableCollectionView derived view for generating PLINQ query expression trees.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.CanExecuteParallel(Syncfusion.Data.DataOperation)">
            <summary>
            Invokes to check whether source is need to execute execute in Parallel Query.
            </summary>
            <param name="operation">DataOperation</param>
            <returns>Returns true if source is execute in parallel query</returns>
        </member>
        <member name="M:Syncfusion.Data.QueryableCollectionView.GetQueryableSource">
            <summary>
            Returns the source as IQueryable. 
            </summary>
            <returns></returns>
            <remarks>
            PagedCollectionView returns paged source as IQueryable.
            Returning query will be sorted query in the case of normal VirtualizingCollectionView.
            It will be sorted and filtered query in the case of PagedCollectionVeiw and OnDemand VirtualizingCollectionView.
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.QueryableCollectionView.UsePLINQ">
            <summary>
            Gets or sets a value indicating whether [use PLINQ]. 
            </summary>
            <value><c>true</c> if [use PLINQ]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.ResetCache">
            <summary>
            Clears the cache while using OnDemandPaging.
            </summary>
            <remarks>
            While navigating between pages, records are loaded through <see cref="!:Syncfusion.UI.Xaml.Controls.DataPager.SfDataPager.OnDemandLoading"/> event
            and the loaded records will be maintained in cache. If you navigate to already navigated page, then records are loaded from cache and the <see cref="!:Syncfusion.UI.Xaml.Controls.DataPager.SfDataPager.OnDemandLoading"/> event will not fire for that corresponding page.
            You can clear the cache by using this method and now the <see cref="!:Syncfusion.UI.Xaml.Controls.DataPager.SfDataPager.OnDemandLoading"/> event will be raised when you navigate to the same page.
            And the records will be loaded through event instead of loading from cache.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.PagedCollectionView.ResetCacheForPage(System.Int32)">
            <summary>
            Reset the cache to particular page.
            </summary>
            <param name="pageIndex">Index of the page to reset its cache.</param>
            <remarks>
            <seealso cref="M:Syncfusion.Data.PagedCollectionView.ResetCache"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Data.IColumnAccessProvider">
            <summary>
            Implements this interface to Get the Value for the column.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.CollectionViewExtensions.ApplyFilters(Syncfusion.Data.CollectionViewAdv,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Data.IFilterDefinition},System.String)">
            <summary>
            Sets the filtered query to ViewSource.
            </summary>
            <param name="filterPredicates">The filterPredicates helps in create Filter Query.</param>
            <param name="columName">The column name.</param>
        </member>
        <member name="T:Syncfusion.Data.IRecordsList">
            <summary>
            Implements an IList structure to contain the list of RecordEntry.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.IRecordsList.GetItemAt(System.Int32)">
            <summary>
            Gets the item at index specified.
            </summary>
            <param name="recordIndex">Index of the record.</param>
            <returns>Returns the item at the specified index.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsList.CreateRecord(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.Data.RecordEntry"/> for the business object.
            </summary>
            <param name="data">The data.</param>
            <returns>Returns the RecordEntry for the specified object.</returns>
        </member>
        <member name="M:Syncfusion.Data.IRecordsList.RemoveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.IRecordsList.TableSummaries">
            <summary>
            Gets the table summaries.
            </summary>
            <value>The table summaries.</value>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.PopulateRecords(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Populates the internalList by enumerating the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="view">The View.</param>
            <remarks>
            The internalList will be populated with null entries in the case of VirtualRecordsList.
            In case of IQueryable source will be filtered by query. So, there is no need of filter each record while populating.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.PopulateRecordsFromGroup(System.Collections.Generic.List{Syncfusion.Data.Group})">
            <summary>
            Populates the internalList by enumerating Group.Records.
            </summary>
            <param name="groups">The list of Groups.</param>
            <remarks>
            The internalList will be populated with null entries in the case of VirtualRecordsList.
            In case of IQueryable source will be filtered by query. So, there is no need of filter each record while populating.
            </remarks>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.CreateRecord(System.Object)">
            <summary>
            Creates the record entry.
            </summary>
            <param name="data">The data to create the RecordEntry.</param>
            <returns>Returns the RecordEntry for the specified data.</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.RemoveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.GetItemAt(System.Int32)">
            <summary>
            Gets item at specified index.
            </summary>
            <param name="recordIndex">The recordIndex to get the object.</param>
            <returns>Returns the object at specified recordIndex</returns>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.Add(System.Object)">
            <summary>
            Adds the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Data.RecordsList.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.RecordsList.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.Data.RecordsList.TableSummaries">
            <summary>
            Gets the table summaries.
            </summary>
            <value>The table summaries.</value>
        </member>
        <member name="T:Syncfusion.Data.LiveDataUpdateMode">
            <summary>    
            Defines the constants that specifies how to update the data during data manipulation operation like add, remove and property change.
            </summary>      
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.Default">
            <summary>
            Data operations are not updated during data manipulation. 
            </summary>
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.AllowSummaryUpdate">
            <summary>
            Summaries updated based on data manipulation changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.AllowDataShaping">
            <summary>
            Data operations sorting ,grouping,filtering and summaries are updated based on data manipulation changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.LiveDataUpdateMode.AllowChildViewUpdate">
            <summary>
            ChildView ItemsSource gets updated when property mapped with GridViewDefinition.RelationalColumn channged.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.CalculationMode">
            <summary>
            Defines the constants that specify the different modes of calculation for  caption and group summary.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CalculationMode.Default">
            <summary>
            Calculates the summary (group and caption) while groping takes place.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CalculationMode.OnDemandCaptionSummary">
            <summary>
            Calculates the summary when caption row comes into view and when you try to access the summay value.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.CalculationMode.OnDemandGroupSummary">
            <summary>
            Calculates the summary when group summary row comes into view and when you try to access the summary value.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.SortComparers">
            <summary>
            Compares two SortComparer to perform sort operation based on custom logic.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SortComparers.#ctor">
            <summary>
            Initializes a new instance of SortComparers class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SortComparers.Item(System.String)">
            <summary>
            Gets the comparer at the specified property name.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            Returns the sort comparer.
            </returns>
        </member>
        <member name="T:Syncfusion.Data.SortComparer">
            <summary>
            Represents the properties to sort the data based on custom logic.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.SortComparer.#ctor">
            <summary>
            Initializes a new instance of SortComparer class.
            </summary>
        </member>
        <member name="P:Syncfusion.Data.SortComparer.PropertyName">
            <summary>
            Gets or sets the property name to sort the data.
            </summary>
            <value>
            A string that specifies the property name.
            </value>
        </member>
        <member name="P:Syncfusion.Data.SortComparer.Comparer">
            <summary>
            Gets or sets the comparer that compares the two cell values and perform custom sorting.
            </summary>
            <value>
            The comparer for performing custom sorting.
            </value>
        </member>
        <member name="T:Syncfusion.Data.ISortDirection">
            <summary>
            Defines the sort direction.
            </summary>
            <remarks>
            You can implement ISortDirection interface in custom sort comparer to get the sort direction. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Data.ISortDirection.SortDirection">
            <summary>
            Specifies the possible direction of a sort operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroup.CreateDetailsForRecords(Syncfusion.Data.Group,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Create Details for record based on filter predicate
            </summary>
            <param name="parent"></param>
            <param name="source"></param>
            <param name="level"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroup.CreateRecord(Syncfusion.Data.Group,System.Object)">
            <summary>
            Creates the record.
            </summary>
            <param name="data">The data to create the RecordEntry.</param>
            <returns>Returns the RecordEntry for parent with specified data.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroupRecordEntry.#ctor(Syncfusion.Data.NodeEntry,System.Int32,System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Constructor to filter the InternalList of VirtualGroup.
            </summary>
            <param name="parent">Parent group</param>
            <param name="level">level of group</param>
            <param name="source">Grouped items</param>
            <param name="filterPredicate">Func to filter Internal list</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index of record.
            </summary>
            <param name="data"></param>
            <returns>Returns from SourceList when the data not a record entry.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.RemoveAt(System.Int32)">
            <summary>
            Override to remove the record from SourceList at specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.Remove(Syncfusion.Data.RecordEntry)">
            <summary>
            Override to remove the record from SourceList.
            </summary>
            <param name="item">The item to be removed from SourceList and intrenalList.</param>
            <returns>Returns true when the item is removed successfully. otherwise, returns false.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryList.Insert(System.Int32,Syncfusion.Data.RecordEntry)">
            <summary>
            Override to insert the record to SourceList.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:Syncfusion.Data.VirtualGroupRecordEntryEnumerator">
            <summary>
            Represent the class to process the enumerator for Records in Group.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualGroupRecordEntryEnumerator.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualGroupRecordEntryEnumerator"/> class.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.VirtualGroupRecordEntryEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualGroupRecordEntryEnumerator"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Data.VirtualizingCollectionView">
            <summary>
            Represents a view for grouping, sorting, filtering, and navigating a data collection in on-demand.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualizingCollectionView.ProcessSort(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Sorts the elements in the collection based on specified sort description.
            </summary>
            <param name="sortDescription">Specifies the sort description to sort the collection</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualizingCollectionView.ApplyFilter(System.Predicate{System.Object})">
            <summary>
            Applies filter  based on specified RowFilter.
            </summary>
            <param name="RowFilter">Specifies the RowFilter to apply filter on collection</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualizingCollectionView.GetGroupedSource(System.String[])">
            <summary>
            Gets the grouped result by specified properties. 
            </summary>
            <param name="groupBy">Specifies the properties to get the group result on collection</param>
            <returns>Returns the collection of GroupResult.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualizingCollectionView.GetSourceList">
            <summary>
            Gets the SourceCollection to load items source in FilterPop-up control.
            </summary>
            <returns>Returns the source that were in view.
            Used in GridFilterControl. Other CollectionViewAdv returns source from CollectionViewAdv.Records.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualizingCollectionView.GetIndexOf(System.Object)">
            <summary>        
            Gets the index at which the specified item is located.
            </summary>
            <param name="item">Specifies the item to get the index</param>
            <returns>Returns the index at which the specified item is located</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualizingCollectionView.GetViewRecordCount">
            <summary>
            Gets the records count that are inview.
            </summary>
            <returns>Returns the records count that are inview.</returns>
        </member>
        <member name="T:Syncfusion.Data.VirtualRecordsList">
            <summary>
            Represents the class that process the ICollectionView.Records of VirtualizingCollectionView.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.VirtualRecordsList.SourceList">
            <summary>
            Stores the business object source.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.VirtualRecordsList.TopRecordIndex">
            <summary>
            Gets or Sets the TopRecordIndex.
            </summary>
            <remarks>TopRecordIndex used to avoid unwanted records fetched from query while scrolling.</remarks>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.OnInitialize">
            <summary>
            Initialize SourceList and internalList.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.PopulateRecords(System.Collections.IEnumerable,Syncfusion.Data.CollectionViewAdv)">
            <summary>
            Populate source list.
            </summary>
            <param name="source">The source to populate the internalList or SourceList.</param>
            <param name="view">The View.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.PopulateRecordsFromGroup(System.Collections.Generic.List{Syncfusion.Data.Group})">
            <summary>
            Override to populate SourceList.
            </summary>
            <param name="groups">The groups to populate the internalList or SourceList.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetRecord(System.Int32)">
            <summary>
            Override to populate and return the RecordEntry by specified index.
            </summary>
            <param name="recordIndex">The recordIndex to get the RecordEntry.</param>
            <returns>Returns the RecordEntry at specified recordIndex.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetRecord(System.Object)">
            <summary>
            Override to populate and return the RecordEntry.
            </summary>
            <param name="data">The data to get the RecordEntry.</param>
            <returns>Returns the RecordEntry based on data.</returns>        
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index of record.
            </summary>
            <param name="data"></param>
            <returns>Returns from SourceList when the data not a record entry.</returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.RemoveAt(System.Int32)">
            <summary>
            Override to remove the record from SourceList at specified index.
            </summary>
            <param name="index">The index to remove the data and RecordEntry.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Remove(Syncfusion.Data.RecordEntry)">
            <summary>
            Override to remove the record from SourceList.
            </summary>
            <param name="item">The item to be removed from SourceList and internalList.</param>
            <returns>
            Returns true the item is removed. otherwise false.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Insert(System.Int32,Syncfusion.Data.RecordEntry)">
            <summary>
            Override to insert the record to SourceList.
            </summary>
            <param name="index">The index in internalList and SourceList is filled by the specified item.</param>
            <param name="item">The item to be inserted at the specified index.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Add(System.Object)">
            <summary>
            Override to add the data to SourceList.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Add(Syncfusion.Data.RecordEntry)">
            <summary>
            Override to add the item to SourceList and internalList.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetSource">
            <summary>
            Returns the list of data from RecordEntry collection.
            </summary>
            <remarks>
            Returns the list of data from SourceList<see cref="F:Syncfusion.Data.VirtualRecordsList.SourceList"/>.
            </remarks>  
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.Clear">
            <summary>
            Clears the SourceList.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordsList.GetRecordEntry(System.Int32,System.Object)">
            <summary>
            Method that populates internalList and return the RecordEntry with specified index.
            </summary>
            <param name="recordIndex">The recordIndex  to get the RecordEntry.</param>
            <returns>Returns the RecordEntry at specified recordIndex or based on data.</returns>                
        </member>
        <member name="T:Syncfusion.Data.VirtualRecordEntryEnumerator">
            <summary>
            Represents the class that process the enumerator of Records in view 
            </summary>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryEnumerator.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualRecordEntryEnumerator"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.VirtualRecordEntryEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Data.VirtualRecordEntryEnumerator"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.DataSetExtensions.EscapeLikeValue(System.String)">
            <summary>
            Insert [ wildcard ] in LIKE Queries.
            http://msdn.microsoft.com/en-us/library/ms179859.aspx
            </summary>
        </member>
        <member name="T:Syncfusion.Data.Extensions.NamespaceDoc">
            <summary>
            Provides classes that simplify programming by providing ready-made solution to process
            the IEnumerable and IQueryable operations.
            </summary>
        </member>
        <member name="T:Syncfusion.Dynamic.DynamicHelper">
            <summary>
            This class responsible to reflect dynamic and expando object. Also maintains cache for faster reflection.
            </summary>
        </member>
        <member name="M:Syncfusion.Dynamic.DynamicHelper.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Dynamic.DynamicHelper"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Dynamic.DynamicHelper.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.Dynamic.DynamicHelper"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.Dynamic.NamespaceDoc">
            <summary>
            Provides classes that simplify programming by providing readymade solution to process 
            the Dynamic collection operations.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.Extensions.FunctionalExtensions">
            <summary>
            Functional method extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.CreateNewInstanceConstructor(System.Type,System.String,System.Type)">
            <summary>
            Creates the new instance constructor.
            </summary>
            <param name="type">The type.</param>
            <param name="fullName">The full name.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over an IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over a generic IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.IterateIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.False``1">
            <summary>
            Falses this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the left.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the right.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.FunctionalExtensions.MoveTo(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves to.
            </summary>
            <param name="list">The list.</param>
            <param name="source">The SRC.</param>
            <param name="destination">The dest.</param>
        </member>
        <member name="T:Syncfusion.Data.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.ColumnFilter">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Data.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.Helper.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.IsComplexType(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.FixDBNullAsNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value">The object.</param>
            <param name="type">The type.</param>
            <returns>Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value">The object.</param>
            <param name="type">The type.</param>
            <returns>Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.</returns>
        </member>
        <member name="T:Syncfusion.Data.Helper.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Data.Helper.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Data.Helper.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDBNullIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDBNullIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDBNullIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDBNullIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="numberFormatInfo">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.TryConvertToBase64String(System.Object)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a base64 string from a byte array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Helper.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Data.Helper.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Data.Helper.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.Data.Helper.NamespaceDoc">
            <summary>
            Provides classes that simplify programming by providing readymade solution to convert and check the type of value.
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.GetComplexPropertyValue(System.String[],System.ComponentModel.PropertyDescriptorCollection,System.Object)">
            <summary>
            Return the value of the given record and complex property column.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.SetValue(System.ComponentModel.PropertyDescriptorCollection,System.Object,System.Object,System.String)">
            <summary>
            Sets the value for the corresponding object available in the PropertyDescriptorCollection
            </summary>
            <param name="pdc">ItemProperties</param>
            <param name="record">Record</param>
            <param name="value">Value</param>
            <param name="columnName">Mapping name of the column(Including complex property mapping names)</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.SetComplexPropertyValue(System.String[],System.ComponentModel.PropertyDescriptorCollection,System.Object,System.Object)">
            <summary>
            Set the value to complex property column with the given record.
            </summary>        
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.GetPropertyDescriptor(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Generate the Property Descriptor for corresponding Property it may be simple or complex property
            </summary>
            <param name="pdc"></param>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.EscapeSpecialChars(System.String)">
            <summary>
            Method to skip Special characters from given string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.PropertyDescriptorExtensions.ContainsSpecialChars(System.String)">
            <summary>
            Method to check the given string contains special characters or not. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Data.Extensions.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Type)">
            <summary>
            Generates the GroupBy Expression
            </summary>
            <param name="groupByName"></param>
            <param name="sortAction"></param>
            <param name="source"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lambda expression for the complex properties
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property
            </summary>        
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expression1"></param>
            <param name="expression2"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>        
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Data.FilterType,Syncfusion.Data.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
            <param name="filterBehaviour"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type</param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new string[]{
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new List&lt;string&gt;() {
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            <para></para>
            <para>It returns a dynamic class generated thru ReflectionEmit, Use reflection
            to identify the properties and values.</para>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetQueryableSumMethod(System.Type)">
            <summary>
            Get the exact Sum method from Queryable based on body type.
            </summary>        
            <param name="bodyType"></param>
            <returns>exact method info</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GetQueryableAverageMethod(System.Type)">
            <summary>
            Get the exact Average method from Queryable based on body type
            </summary>        
            <param name="bodyType"></param>
            <returns>exact method info</returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByColumns(System.Linq.IQueryable,System.Type,System.String[])">
            <summary>
            Generates the GroupBy count query.
            </summary>                
            from p in Orders20151102113915820s
            group p.RowID by p.RowID into g
            select new { g.Key, Count = g.Count()}
            <param name="source">The SourceQuery</param>
            <param name="sourceType">The SourceType</param>
            <param name="properties">The GroupedProperties</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Data.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();
            <para></para>            var queryable = orders.AsQueryable();
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);
            <para></para>            var binaryExp = queryable.Predicate(parameter,
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);
            <para></para>            foreach (var order in filteredOrders)
            <para></para>            {
            <para></para>                Console.WriteLine(order);
            <para></para>            }
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();
            <para></para>            var parameter = queryable.Parameter();
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            <para></para>            var andExp = exp2.OrPredicate(exp1);
            <para></para>            var filters = queryable.Where(parameter, andExp);
            <para></para>            foreach (Orders item in filters)
            <para></para>            {
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);
            <para></para>            }
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
        <member name="M:Syncfusion.Data.Extensions.QueryableExtensions.GroupByMany(System.Data.DataView,System.Type,System.Func{System.String,System.Linq.Expressions.Expression},System.String[])">
            <summary>
            Generates the groups for DataTable.
            </summary>
            <param name="source">DataView</param>
            <param name="sourceType">DataRowView</param>
            <param name="GetExpressionFunc">Linq expression</param>
            <param name="properties">Column</param>
            <returns></returns>
        </member>
    </members>
</doc>
