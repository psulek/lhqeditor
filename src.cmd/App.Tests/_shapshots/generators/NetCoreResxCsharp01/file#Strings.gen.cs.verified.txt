//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetCoreResxCsharp01
{
	using System;
	using System.Resources;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Linq;
	using System.Globalization;
	using Microsoft.Extensions.Localization;

	public class StringsLocalizer : IStringLocalizer
	{
		private readonly CultureInfo _culture;
		private CultureInfo _fallbackCulture;
	
		private static readonly Lazy<ResourceManager> _resourceManager = new Lazy<ResourceManager>(CreateResourceManager);

		public StringsLocalizer()
		{}

		public StringsLocalizer(CultureInfo culture)
		{
			_culture = culture;
		}

		public const string PrimaryCulture = "en";

		public static ResourceManager ResourceManager => _resourceManager.Value;

		private static ResourceManager CreateResourceManager()
		{
			return new ResourceManager("NetCoreResxCsharp01.Resources.Strings",
					typeof(NetCoreResxCsharp01.Strings).GetTypeInfo().Assembly);
		}

		public CultureInfo FallbackCulture
		{
			get
			{
				if (_fallbackCulture == null)
				{
					_fallbackCulture = new CultureInfo(PrimaryCulture);
				}
				return _fallbackCulture;
			}
			set
			{
				if ((value == null) || !Strings.AvailableCultures.Contains(value.Name))
				{
					throw new InvalidOperationException($"Unable to set fallback culture to '{value.Name}' which is not defined in available cultures!");
				}

				_fallbackCulture = value;
			}
		}
	

		LocalizedString IStringLocalizer.this[string name]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var value = GetStringSafely(name, _culture);
				return new LocalizedString(name, value ?? name, value == null);
			}
		}

		LocalizedString IStringLocalizer.this[string name, params object[] arguments]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var format = GetStringSafely(name, _culture);
				var value = string.Format(format ?? name, arguments);
				return new LocalizedString(name, value, format == null);
			}
		}

		public IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures)
		{
			throw new NotImplementedException();
		}

		public IStringLocalizer WithCulture(CultureInfo culture) => new StringsLocalizer(culture);

		private string GetStringSafely(string name, CultureInfo culture)
		{
			string result = null;
			try
			{
				result = culture == null ? ResourceManager.GetString(name) : ResourceManager.GetString(name, culture);
			}
			catch (MissingManifestResourceException)
			{} // Resource does not exist

			if (result == null)
			{
				if (FallbackCulture != null)
				{
					try
					{
						result = ResourceManager.GetString(name, FallbackCulture);
					}
					catch (MissingManifestResourceException)
					{} // Resource does not exist

					if (result == null)
					{
						result = string.Format("???{0}.{1}???", name, FallbackCulture == null ? string.Empty : FallbackCulture.Name);
					}
				}
				else
				{
					result = string.Format("???{0}.{1}???", name, culture == null ? string.Empty : culture.Name);
				}
			}

			return result;
		}
	}

	public static class StringsKeys
	{
		public static class Cars
		{
			public static class Diesel
			{
				public static class Old
				{
					/// <summary>
					/// Gets localized string similar to: Old_ kia EN
					/// </summary>
					public const string Old_Kia = "CarsDieselOldOld_Kia";
				}
				/// <summary>
				/// Gets localized string similar to: Mercedes EN
				/// </summary>
				public const string Mercedes = "CarsDieselMercedes";
				/// <summary>
				/// Gets localized string similar to: Skoda EN
				/// </summary>
				public const string Skoda = "CarsDieselSkoda";
			}
			
			public static class Electric
			{
				/// <summary>
				/// Gets localized string similar to: toyota EN
				/// </summary>
				public const string ToyotaEV = "CarsElectricToyotaEV";
			}
		}
		
		public static class Messages
		{
			/// <summary>
			/// Gets localized string similar to: Hi {0}, we're glad you are using {1} at {2} / \ [ ] < > " & car <abc> </end>
			/// </summary>
			public const string Title = "MessagesTitle";
		}
		
		/// <summary>
		/// Gets localized string similar to: Welcome {0} in this {1} !
		/// </summary>
		public const string Welcome = "Welcome";
	}

	public partial class Strings
	{
		private static IStringLocalizer _localizer;

		public Strings(IStringLocalizer localizer)
		{
			_localizer = localizer;
		}


		public static string[] AvailableCultures => new string[] { "en","sk" };

		public static partial class Cars
		{
			public static partial class Diesel
			{
				public static partial class Old
				{
					/// <summary>
					/// Gets localized string similar to: Old_ kia EN
					/// </summary>
					public static string Old_Kia => _localizer[StringsKeys.Cars.Diesel.Old.Old_Kia];
			
				}
				/// <summary>
				/// Gets localized string similar to: Mercedes EN
				/// </summary>
				public static string Mercedes => _localizer[StringsKeys.Cars.Diesel.Mercedes];
		
				/// <summary>
				/// Gets localized string similar to: Skoda EN
				/// </summary>
				public static string Skoda => _localizer[StringsKeys.Cars.Diesel.Skoda];
		
			}
			
			public static partial class Electric
			{
				/// <summary>
				/// Gets localized string similar to: toyota EN
				/// </summary>
				public static string ToyotaEV => _localizer[StringsKeys.Cars.Electric.ToyotaEV];
		
			}
		}
		
		public static partial class Messages
		{
			/// <summary>
			/// Gets localized string similar to: Hi {0}, we're glad you are using {1} at {2} / \ [ ] < > " & car <abc> </end>
			/// </summary>
			public static string Title => _localizer[StringsKeys.Messages.Title];
	
		}
		
		/// <summary>
		/// Gets localized string similar to: Welcome {0} in this {1} !
		/// </summary>
		public static string Welcome => _localizer[StringsKeys.Welcome];

	}
}
