{{#with model}}
{{#if (x-isNotNullOrEmpty @root.settings.Typescript.AmbientNamespaceName) }}
declare namespace {{ @root.settings.Typescript.AmbientNamespaceName }} {
	{{> template }}
	
{{else}}
{{> template }}

{{/if}}
{{#if (x-isNotNullOrEmpty @root.settings.Typescript.AmbientNamespaceName) }}
}
{{/if}}
{{/with}}
{{#*inline "template"}}
export interface {{ x-concat @root.settings.Typescript.InterfacePrefix model.name }} {
{{#each categories ~}}
	{{> category }}
{{/each}}
{{#if resources}}
{{> resources }}
{{/if}}
}

export interface {{ x-concat @root.settings.Typescript.InterfacePrefix model.name "Metadata" }} {
    default: string;
    languages: Array<string>;
}
{{/inline}}
{{#*inline "category"}}
{{@key}}: {
{{#each categories }}
	{{> category ~}}
{{/each}}
{{> resources }}
}{{#if ( x-logical (x-isFalse (x-fn isLast)) (x-fn hasResources) op="or" ) }},{{/if}}
{{/inline}}
{{#*inline "resources"}}
{{#if resources}}
{{#each resources}}
	{{@key}}: string;
{{/each}}
{{/if}}
{{/inline}}