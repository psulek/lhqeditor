{{{ x-header }}}

{{#with model}}
namespace {{ @root.host.namespace }}
{
    using System;
    using System.ComponentModel;
    using System.Linq;
    using System.Resources;
    using System.Reflection;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Threading;
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class {{model.name}}Context: INotifyPropertyChanged, IFormattable
    {
        private CultureInfo _culture;
        private CultureInfo _fallbackCulture;
        private static readonly Lazy<{{model.name}}Context> _instance = new Lazy<{{model.name}}Context>(() => new {{model.name}}Context());
        private static readonly Lazy<ResourceManager> _resourceManager = new Lazy<ResourceManager>(CreateResourceManager);
    
        private StringsContext()
        {}
    
        public static ResourceManager ResourceManager
        {
            get
            {
                return _resourceManager.Value;
            }
        }
    
        public const string PrimaryCulture = "{{model.primaryLanguage}}";
    
        public string[] AvailableCultures
        {
            get
            {
                return new string[] { {{x-join languages }} };
            }
        }
    
        public CultureInfo FallbackCulture
        {
            get
            {
                if (_fallbackCulture == null)
                {
                    _fallbackCulture = new CultureInfo(PrimaryCulture);
                }
                return _fallbackCulture;
            }
            set
            {
                if ((value == null) || !AvailableCultures.Contains(value.Name))
                {
                    throw new InvalidOperationException($"Unable to set fallback culture to '{value.Name}' which is not defined in available cultures!");
                }
        
                _fallbackCulture = value;
            }
        }
    
        public static {{model.name}}Context Instance
        {
            get
            {
                return _instance.Value;
            }
        }
    
        public CultureInfo Culture
        {
            get
            {
                return _culture ?? (_culture = CultureInfo.CurrentUICulture);
            }
            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("Culture must not be null");
                }
            
                if (value.Name == Culture.Name)
                {
                    return;
                }
            
                _culture = value;
                Thread.CurrentThread.CurrentUICulture = _culture;
                OnPropertyChanged(nameof(Culture));
            }
        }
    
        private static ResourceManager CreateResourceManager()
        {
            return new ResourceManager("{{ x-concat @root.host.namespace (x-trimEnd @root.settings.CSharp.OutputFolder "[\\/]") model.name sep="." }}",
                typeof({{x-concat @root.host.namespace model.name sep="."}}).Assembly);
        }

        public string ToString(string format, IFormatProvider formatProvider)
		{
			return GetStringSafely(format);
		}

		public string GetStringSafely(string name)
		{
			if (name == null)
			{
				throw new ArgumentNullException(nameof(name));
			}

			string result = GetStringSafely(name, Culture);
			if (result == null)
			{
                {{#if (x-equals @root.settings.CSharp.MissingTranslationFallbackToPrimary "true") }}
				if (FallbackCulture != null)
				{
					result = GetStringSafely(name, FallbackCulture);
					if (result == null)
					{
						result = string.Format("???{0}.{1}???", name, FallbackCulture == null ? string.Empty : FallbackCulture.Name);
					}
				}
                {{else}}
                result = string.Format("???{0}.{1}???", name, Culture == null ? string.Empty : Culture.Name);
                {{/if}}
			}

			return result;
		}

		private string GetStringSafely(string name, CultureInfo culture)
		{
			string result = null;
			try
			{
				result = culture == null ? ResourceManager.GetString(name) : ResourceManager.GetString(name, culture);
			}
			catch (MissingManifestResourceException)
			{
				// Resource does not exist
			}

			return result;
		}

		public event PropertyChangedEventHandler PropertyChanged;

		private void OnPropertyChanged(string property)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(property));
		}
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public static partial class {{model.name}}Keys
    {
    {{#each categories ~}}
        {{#with (x-merge this _resourceRenderValue="key")}}
        {{> category _parent='' }}
        {{/with}}
    {{/each}}
    {{#with (x-merge this _resourceRenderValue="key")}}
    {{> resources }}
    {{/with}}
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class {{model.name}}
    {
    }
}
{{/with}}

{{#*inline "category"}}
public static partial class {{@key}}
{
{{#each categories ~}}
    // _resourceRenderValue0 > {{../_resourceRenderValue}}
    {{#with (x-merge this _resourceRenderValue=../_resourceRenderValue) }}
    {{> category _parent=(x-concat @../_parent.key  @../key sep="") }}
    {{/with}}
{{/each}}
{{> resources }}
}

{{/inline}}
{{#*inline "resources"}}
    // _resourceRenderValue1 > {{_resourceRenderValue}}
{{#if resources}}
{{#each resources}}
    /// <summary>
    /// Gets localized string similar to: {{ x-resourceComment this root=@root }}
    /// </summary>
    public const string {{@key}} = "{{x-concat ../_parent @../key @key}}";
{{/each}}
{{/if}}
{{/inline}}