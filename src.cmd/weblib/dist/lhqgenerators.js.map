{"version":3,"file":"lhqgenerators.js","mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACb0H;AACtF;AAC7B;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0CAAM;AACtB;AACA,kBAAkB,4CAAQ;AAC1B,kBAAkB,4CAAQ;AAC1B;AACA;AACA;AACA,uBAAuB,iDAAa;AACpC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oDAAoD,OAAO,GAAG,QAAQ,IAAI,KAAK,GAAG;AACpF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU,EAAE,EAAE,EAAE,UAAU;AACzE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B;AACA,kCAAkC,qDAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAkE;AAC7F;AACA;AACA;AACA;AACA,WAAW,uDAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAc,kDAAU,QAAQ,oBAAoB;AACpD;AACA;AACA;AACA;AACA,QAAQ,qDAAa;AACrB;AACA;AACA,oBAAoB,6CAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAO;AACX;AACA;;;;;;;;;;;;;;;ACrRA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,8CAA8C,KAAK,kBAAkB,QAAQ;AAC7E;AACA;AACA,uCAAuC,KAAK,mBAAmB,QAAQ;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClCA;AAC4C;AAC0B;AACM;AACJ;AACM;AACV;AACkB;AACtF;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAe;AACvB;AACA;AACA;AACA;AACA;AACA,oBAAoB,qCAAqC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oJAAoJ,QAAQ,2HAA2H;AACvR;AACA,0FAA0F,QAAQ,sHAAsH;AACxN;AACA;AACA,+CAA+C,QAAQ,uGAAuG;AAC9J;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA,4CAA4C,uDAAe;AAC3D,gBAAgB,qDAAa;AAC7B;AACA;AACA;AACA,mDAAmD,gDAAQ;AAC3D,kDAAkD,gDAAQ;AAC1D;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C,uDAAe;AAC1D,gBAAgB,qDAAa;AAC7B;AACA;AACA,mDAAmD,gDAAQ;AAC3D;AACA,8CAA8C,yDAAiB;AAC/D,wBAAwB,qDAAa;AACrC;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uCAAuC,gDAAQ;AAC/C,sCAAsC,gDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK,+EAAwB,MAAM,+EAAwB;AAC3D,KAAK,qFAA2B,MAAM,qFAA2B;AACjE,KAAK,iFAAyB,MAAM,iFAAyB;AAC7D,KAAK,uFAA4B,MAAM,uFAA4B;AACnE,KAAK,6EAAuB,MAAM,6EAAuB;AACzD;;;;;;;;;;;;;;;;;;ACvGyC;AACJ;AACQ;AACtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,aAAa;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAa,4BAA4B,6CAAO;AAC/D;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc,yDAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAa;AACzB,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxCgE;AAC3B;AACI;AACF;AAChC,qCAAqC,yEAAqB;AACjE;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAa;AACzB,sBAAsB,+CAAQ,iCAAiC,IAAI;AACnE;AACA,gDAAgD,IAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,aAAa;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAO;AACnB;AACA;AACA;AACA,sDAAsD,qDAAa;AACnE;AACA;AACA;AACA,qBAAqB,qDAAa;AAClC;AACA;AACA,iEAAiE,UAAU,GAAG,KAAK;AACnF,oBAAoB,6CAAO;AAC3B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3EkE;AAC3D,0CAA0C,2EAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXkE;AAC3D,wCAAwC,2EAAsB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACXgE;AAC3B;AAC4B;AAC1D,uCAAuC,yEAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAO;AACnB;AACA;AACA,2CAA2C,sDAAc;AACzD;AACA;AACA,2BAA2B,8CAAM;AACjC;AACA;AACA,6DAA6D,UAAU,GAAG,uBAAuB;AACjG,YAAY,6CAAO;AACnB;AACA;AACA;AACA;AACA,qBAAqB,qDAAa;AAClC;AACA,+EAA+E,KAAK;AACpF;AACA;AACA;AACA,iEAAiE,UAAU,EAAE,SAAS;AACtF,oBAAoB,6CAAO;AAC3B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClEkE;AAC3D,2CAA2C,2EAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXkE;AAC3D,sCAAsC,2EAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,oBAAoB;AACpB,oBAAoB;AACpB,mBAAmB;AACnB,KAAK;AACL;AACA,kBAAkB;AAClB,kBAAkB;AAClB,mBAAmB;AACnB,KAAK;AACL;AACA,kBAAkB;AAClB,kBAAkB;AAClB,oBAAoB;AACpB,oBAAoB;AACpB,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCnKA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACkC","sources":["webpack://LhqGenerators/./src/AppError.ts","webpack://LhqGenerators/./src/helpers.ts","webpack://LhqGenerators/./src/hostEnv.ts","webpack://LhqGenerators/./src/templateManager.ts","webpack://LhqGenerators/./src/templates/codeGeneratorTemplate.ts","webpack://LhqGenerators/./src/templates/csharpResXTemplateBase.ts","webpack://LhqGenerators/./src/templates/netCoreResxCsharp.ts","webpack://LhqGenerators/./src/templates/netFwResxCsharp.ts","webpack://LhqGenerators/./src/templates/typescriptJson.ts","webpack://LhqGenerators/./src/templates/winFormsResxCsharp.ts","webpack://LhqGenerators/./src/templates/wpfResxCsharp.ts","webpack://LhqGenerators/./src/utils.ts","webpack://LhqGenerators/webpack/bootstrap","webpack://LhqGenerators/webpack/runtime/define property getters","webpack://LhqGenerators/webpack/runtime/hasOwnProperty shorthand","webpack://LhqGenerators/webpack/runtime/make namespace object","webpack://LhqGenerators/./src/index.ts"],"sourcesContent":["export class AppError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.message = message;\n        this.name = 'AppError';\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppError);\n        }\n        if (stack !== undefined && stack !== null) {\n            this.stack = stack;\n        }\n    }\n}\n","import { getNestedPropertyValue, hasItems, isNullOrEmpty, objCount, sortBy, sortObjectByKey, textEncode, } from \"./utils\";\nimport { HostEnv } from \"./hostEnv\";\nexport function registerHelpers() {\n    Object.keys(helpersList).forEach(key => {\n        // @ts-ignore\n        Handlebars.registerHelper(key, helpersList[key]);\n    });\n}\nconst helpersList = {\n    'x-header': header,\n    'x-value': objValue,\n    'x-indent': indent,\n    'x-join': join,\n    'x-concat': concat,\n    'x-replace': replace,\n    'x-trimEnd': trimEnd,\n    'x-equals': equals,\n    'x-isTrue': isTrueHelper,\n    'x-isFalse': isFalseHelper,\n    'x-resourceComment': resourceComment,\n    'x-resourceValue': resourceValue,\n    'x-resourceHasLang': resourceHasLang,\n    'x-resourceParamNames': resourceParamNames,\n    'x-merge': merge,\n    'x-sortBy': sortBy,\n    'x-sortObject': sortObjectByKeyHelper,\n    'x-objCount': objCount,\n    'x-hasItems': hasItems,\n    'x-textEncode': textEncodeHelper,\n    'x-host-webHtmlEncode': hostWebHtmlEncodeHelper,\n    'x-render': renderHelper,\n    'x-isNullOrEmpty': isNullOrEmpty,\n    'x-isNotNullOrEmpty': isNotNullOrEmptyHelper,\n    'x-fn': callFunctionHelper,\n    'x-logical': logicalOperatorHelper,\n    'x-debugLog': debugLogHelper\n};\nexport function getKnownHelpers() {\n    return Object.fromEntries(Object.keys(helpersList).map(key => [key, true]));\n}\nfunction header() {\n    return `//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool - Localization HQ Editor.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------`;\n}\nfunction objValue(context, path) {\n    const value = getNestedPropertyValue(context, path);\n    return value !== undefined ? value : '';\n}\nfunction indent(count, options) {\n    count = count < 0 ? 0 : count;\n    // @ts-ignore\n    var content = options.fn(this);\n    var paddedContent = content.split('\\n')\n        .map(line => '\\t'.repeat(count) + line)\n        .join('\\n');\n    return paddedContent;\n}\n/*\n{{#join people delimiter=\" and \" start=\"0\" end=\"2\"}}{{name}} ({{gender}}, {{age}}){{/join}}\n<h1>Jobs</h1>\n{{join jobs delimiter=\", \" start=\"1\" end=\"2\"}}\n*/\nfunction join(items, block) {\n    var delimiter = block.hash.delimiter || \",\", start = block.hash.start || 0, len = items ? items.length : 0, end = block.hash.end || len, out = \"\", decorator = block.hash.decorator || `\"`;\n    if (end > len)\n        end = len;\n    if ('function' === typeof block) {\n        for (let i = start; i < end; i++) {\n            if (i > start)\n                out += delimiter;\n            if ('string' === typeof items[i])\n                out += items[i];\n            else\n                out += block(items[i]);\n        }\n        return out;\n    }\n    else {\n        // @ts-ignore\n        var res = [].concat(items).map(x => `${decorator}${x}${decorator}`).slice(start, end).join(delimiter);\n        // @ts-ignore\n        return new Handlebars.SafeString(res);\n    }\n}\n// usage: {{ x-concat 'prop1' 'prop2' 'prop3' sep=\",\" }}\nfunction concat(...args) {\n    const options = args.pop();\n    const sep = options.hash.sep || ''; // Default to empty string if no separator is provided\n    // @ts-ignore\n    //return args.filter(Boolean).join(sep);\n    return args.join(sep);\n}\nfunction replace(value, block) {\n    const what = block.hash.what || '', withStr = block.hash.with || '';\n    if (!what || !withStr || (what === withStr)) {\n        return value;\n    }\n    const regex = new RegExp(what, 'g');\n    return value.replace(regex, withStr);\n}\n// usage: {{x-trimEnd fullPath \"/index.html\"}}\nfunction trimEnd(input, endPattern) {\n    try {\n        const regex = new RegExp(endPattern + '$');\n        return input.replace(regex, '');\n    }\n    catch (error) {\n        console.error('Invalid regex pattern:', endPattern);\n        return input;\n    }\n}\n// usage: {{#x-equals 'hello world' 'WorlD' cs=\"false\" }}\n// function ifEquals(input: any, value: any, block: any): boolean {\n//     const cs = (block.hash.cs || \"true\").toString().toLowerCase() == \"true\";\n//     const val1 = typeof input === \"string\" ? input : (input?.toString() ?? '');\n//     const val2 = typeof value === \"string\" ? value : (value?.toString() ?? '');\n//    \n//     const equals = cs ? val1 === val2 : (val1.toLowerCase() === val2.toLowerCase());\n//     if (equals) {\n//         // @ts-ignore\n//         return block.fn(this);\n//     } else {\n//         // @ts-ignore\n//         return block.inverse(this);\n//     }\n// }\nfunction equals(input, value, block) {\n    /*const cs = (block.hash.cs || \"true\").toString().toLowerCase() == \"true\";\n    const val1 = typeof input === \"string\" ? input : (input?.toString() ?? '');\n    const val2 = typeof value === \"string\" ? value : (value?.toString() ?? '');*/\n    const { cs, val1, val2 } = getDataForCompare(input, value, block);\n    return cs ? val1 === val2 : (val1.toLowerCase() === val2.toLowerCase());\n}\nfunction isTrueHelper(input) {\n    return input === true;\n}\nfunction isFalseHelper(input) {\n    return input === false;\n}\nfunction getDataForCompare(input, value, block) {\n    var _a, _b;\n    const cs = (block.hash.cs || \"true\").toString().toLowerCase() == \"true\";\n    const val1 = typeof input === \"string\" ? input : ((_a = input === null || input === void 0 ? void 0 : input.toString()) !== null && _a !== void 0 ? _a : '');\n    const val2 = typeof value === \"string\" ? value : ((_b = value === null || value === void 0 ? void 0 : value.toString()) !== null && _b !== void 0 ? _b : '');\n    return { cs: cs, val1, val2 };\n}\nfunction logicalOperatorHelper(input, value, block) {\n    const op = block.hash.op || 'and';\n    if (op === 'and') {\n        return input === value;\n    }\n    else if (op === 'or') {\n        return input || value;\n    }\n    return false;\n}\n// function compareHelper(input: any, value: any, block: any): boolean {\n//     const cs = (block.hash.cs || \"true\").toString().toLowerCase() == \"true\";\n//     const {cs, val1, val2} = getDataForCompare(input, value, block)\n//\n// }\nfunction trimComment(value) {\n    let trimmed = false;\n    var idxNewLine = value.indexOf('\\r\\n');\n    if (idxNewLine == -1) {\n        idxNewLine = value.indexOf('\\n');\n    }\n    if (idxNewLine == -1) {\n        idxNewLine = value.indexOf('\\r');\n    }\n    if (idxNewLine > -1) {\n        value = value.substring(0, idxNewLine);\n        trimmed = true;\n    }\n    if (value.length > 80) {\n        value = value.substring(0, 80);\n        trimmed = true;\n    }\n    if (trimmed) {\n        value += \"...\";\n    }\n    return value.replace('\\t', ' ');\n}\nfunction resourceComment(resource, options) {\n    var _a, _b, _c;\n    if (typeof resource === 'object') {\n        const model = options.hash.root.model;\n        const primaryLanguage = (_b = (_a = model === null || model === void 0 ? void 0 : model.model) === null || _a === void 0 ? void 0 : _a.primaryLanguage) !== null && _b !== void 0 ? _b : '';\n        if (!isNullOrEmpty(primaryLanguage) && resource.values) {\n            const resourceValue = (_c = resource.values[primaryLanguage]) === null || _c === void 0 ? void 0 : _c.value;\n            let propertyComment = isNullOrEmpty(resourceValue) ? resource.description : resourceValue;\n            propertyComment = trimComment(propertyComment);\n            // @ts-ignore\n            return new Handlebars.SafeString(propertyComment);\n        }\n    }\n    return '';\n}\nfunction resourceValue(resource, options) {\n    var _a, _b, _c, _d, _e;\n    if (typeof resource === 'object') {\n        const lang = (_a = options.hash.lang) !== null && _a !== void 0 ? _a : '';\n        const trim = (_b = options.hash.trim) !== null && _b !== void 0 ? _b : false;\n        if (!isNullOrEmpty(lang)) {\n            const res = (_e = (_d = (_c = resource === null || resource === void 0 ? void 0 : resource.values) === null || _c === void 0 ? void 0 : _c[lang]) === null || _d === void 0 ? void 0 : _d.value) !== null && _e !== void 0 ? _e : '';\n            return trim ? res.trim() : res;\n        }\n    }\n    return '';\n}\nfunction resourceHasLang(resource, options) {\n    var _a;\n    if (typeof resource === 'object') {\n        const lang = (_a = options.hash.lang) !== null && _a !== void 0 ? _a : '';\n        if (!isNullOrEmpty(lang) && resource.values && resource.values[lang]) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction resourceParamNames(resource, options) {\n    var _a, _b;\n    if (typeof resource === 'object' && resource.parameters) {\n        const withTypes = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.withTypes) !== null && _b !== void 0 ? _b : false;\n        return Object.keys(resource.parameters).map(key => {\n            return withTypes ? `object ${key}` : key;\n        }).join(',');\n    }\n    return '';\n}\nfunction merge(context, options) {\n    var _a;\n    return Object.assign({}, context, (_a = options.hash) !== null && _a !== void 0 ? _a : {});\n}\nfunction sortObjectByKeyHelper(obj, options) {\n    var _a, _b;\n    const sortOrder = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.sortOrder) !== null && _b !== void 0 ? _b : 'asc';\n    return sortObjectByKey(obj, sortOrder);\n}\nfunction textEncodeHelper(str, options) {\n    var _a, _b, _c, _d;\n    const mode = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : 'html';\n    const quotes = (_d = (_c = options === null || options === void 0 ? void 0 : options.hash) === null || _c === void 0 ? void 0 : _c.quotes) !== null && _d !== void 0 ? _d : false;\n    const s = textEncode(str, { mode: mode, quotes });\n    // @ts-ignore\n    return new Handlebars.SafeString(s);\n}\nfunction hostWebHtmlEncodeHelper(str) {\n    if (isNullOrEmpty(str)) {\n        return str;\n    }\n    const encoded = HostEnv.webHtmlEncode(str);\n    // @ts-ignore\n    return new Handlebars.SafeString(encoded);\n}\nfunction renderHelper(input, options) {\n    var _a, _b;\n    const when = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.when) !== null && _b !== void 0 ? _b : true;\n    // @ts-ignore\n    return when ? input : '';\n}\nfunction isNotNullOrEmptyHelper(input) {\n    return !isNullOrEmpty(input);\n}\nfunction callFunctionHelper(fn) {\n    // HostEnv.debugLog(\"[callFunctionHelper] fn: \" + typeof fn + \" , \" + JSON.stringify(fn));\n    return fn();\n}\nfunction debugLogHelper(...args) {\n    HostEnv.debugLog(args.join(' '));\n    return '';\n}\n","// declare let HostEnv: {\n//     DebugLog: (msg: string) => void;\n//     AddResultFile: (name: string, content: string) => void;\n// }\nexport class HostEnv {\n    static addResultFile(name, content) {\n        if (HostAddResultFile) {\n            HostAddResultFile(name, content);\n            //HostEnv.debugLog(`Added file '${name}' with content: ${content}`);\n        }\n        else {\n            console.log(`Added file '${name}' with content: '${content}'`);\n        }\n    }\n    static debugLog(msg) {\n        if (HostDebugLog) {\n            HostDebugLog(msg);\n        }\n        else {\n            console.log(msg);\n        }\n    }\n    static pathCombine(path1, path2) {\n        if (HostPathCombine) {\n            return HostPathCombine(path1, path2);\n        }\n        return path1 + '/' + path2;\n    }\n    static webHtmlEncode(input) {\n        if (HostWebHtmlEncode) {\n            return HostWebHtmlEncode(input);\n        }\n        return input;\n    }\n}\n","// noinspection JSUnusedGlobalSymbols\nimport { registerHelpers } from \"./helpers\";\nimport { TypescriptJson01Template } from \"./templates/typescriptJson\";\nimport { NetCoreResxCsharp01Template } from \"./templates/netCoreResxCsharp\";\nimport { NetFwResxCsharp01Template } from \"./templates/netFwResxCsharp\";\nimport { WinFormsResxCsharp01Template } from \"./templates/winFormsResxCsharp\";\nimport { WpfResxCsharp01Template } from \"./templates/wpfResxCsharp\";\nimport { hasItems, iterateObject, sortObjectByKey, sortObjectByValue } from \"./utils\";\nconst CodeGenUID = 'b40c8a1d-23b7-4f78-991b-c24898596dd2';\nexport class TemplateManager {\n    static intialize(handlebarFiles) {\n        TemplateManager.handlebarFiles = JSON.parse(handlebarFiles);\n        // @ts-ignore\n        String.prototype.isTrue = function () {\n            return this.toLowerCase() === \"true\";\n        };\n        registerHelpers();\n    }\n    static runTemplate(lhqModelJson, hostData) {\n        let lhqModel = JSON.parse(lhqModelJson);\n        if (lhqModel) {\n            lhqModel = TemplateManager.sortByNameModel(lhqModel);\n            const { template, templateId, settingsNode } = TemplateManager.loadTemplate(lhqModel);\n            let settings = template.loadSettings(settingsNode);\n            let host = {};\n            if (hostData) {\n                host = JSON.parse(hostData);\n            }\n            const rootModel = {\n                model: lhqModel,\n                settings: settings,\n                host: host,\n                extra: {}\n            };\n            template.generate(rootModel);\n        }\n        else {\n            throw new Error(`Unable to deserialize LHQ model !`);\n        }\n    }\n    static loadTemplate(model) {\n        var _a, _b, _c;\n        let template = undefined;\n        let templateId = '';\n        let node = (_b = (_a = model.metadatas) === null || _a === void 0 ? void 0 : _a.childs) === null || _b === void 0 ? void 0 : _b.find(x => { var _a; return x.name === 'metadata' && ((_a = x.attrs) === null || _a === void 0 ? void 0 : _a['descriptorUID']) === CodeGenUID; });\n        if (node) {\n            node = (_c = node.childs) === null || _c === void 0 ? void 0 : _c.find(x => { var _a; return x.name === 'content' && ((_a = x.attrs) === null || _a === void 0 ? void 0 : _a['templateId']) !== undefined; });\n            if (node) {\n                templateId = node === null || node === void 0 ? void 0 : node.attrs['templateId'];\n                node = node.childs.find(x => { var _a; return x.name === 'Settings' && ((_a = x.childs) === null || _a === void 0 ? void 0 : _a.length) > 0; });\n            }\n        }\n        if (node && templateId !== undefined && template !== '') {\n            const ctor = TemplateManager.generators[templateId];\n            template = (ctor && new ctor(TemplateManager.handlebarFiles)) || undefined;\n            return { template, templateId, settingsNode: node };\n        }\n        throw new Error(`Template '${templateId}' not found !`);\n    }\n    static sortByNameModel(lhqModel) {\n        function recursiveCategories(parentCategory) {\n            if (parentCategory.categories) {\n                parentCategory.categories = sortObjectByKey(parentCategory.categories);\n                iterateObject(parentCategory.categories, (category, _, __, isLastCategory) => {\n                    category.isRoot = () => false;\n                    category.isLast = () => isLastCategory;\n                    category.getParent = () => parentCategory;\n                    category.hasCategories = () => hasItems(parentCategory.categories);\n                    category.hasResources = () => hasItems(parentCategory.resources);\n                    recursiveCategories(category);\n                });\n            }\n            if (parentCategory.resources) {\n                parentCategory.resources = sortObjectByKey(parentCategory.resources);\n                iterateObject(parentCategory.resources, (resource, _, __, isLastResource) => {\n                    resource.isLast = () => isLastResource;\n                    resource.getParent = () => parentCategory;\n                    resource.hasParameters = () => hasItems(resource.parameters);\n                    if (resource.parameters) {\n                        resource.parameters = sortObjectByValue(resource.parameters, x => x.order);\n                        iterateObject(resource.parameters, (parameter, _, __, isLastParam) => {\n                            parameter.isLast = () => isLastParam;\n                            parameter.getParent = () => resource;\n                        });\n                    }\n                });\n            }\n        }\n        lhqModel.isRoot = () => true;\n        lhqModel.isLast = () => true;\n        lhqModel.getParent = () => undefined;\n        lhqModel.hasCategories = () => hasItems(lhqModel.categories);\n        lhqModel.hasResources = () => hasItems(lhqModel.resources);\n        recursiveCategories(lhqModel);\n        return lhqModel;\n    }\n}\nTemplateManager.generators = {\n    [TypescriptJson01Template.Id]: TypescriptJson01Template,\n    [NetCoreResxCsharp01Template.Id]: NetCoreResxCsharp01Template,\n    [NetFwResxCsharp01Template.Id]: NetFwResxCsharp01Template,\n    [WinFormsResxCsharp01Template.Id]: WinFormsResxCsharp01Template,\n    [WpfResxCsharp01Template.Id]: WpfResxCsharp01Template\n};\n","import { isNullOrEmpty } from \"../utils\";\nimport { HostEnv } from \"../hostEnv\";\nimport { getKnownHelpers } from \"../helpers\";\nexport class CodeGeneratorTemplate {\n    constructor(handlebarFiles) {\n        this.handlebarFiles = handlebarFiles;\n    }\n    getHandlebarFile(templateName) {\n        const file = this.handlebarFiles[templateName];\n        if (file === undefined || file === '') {\n            throw new Error(`Handlebar file with name '${templateName}' not found !`);\n        }\n        return file;\n    }\n    prepareFilePath(fileName, outputSettings) {\n        const outputFolder = outputSettings.OutputFolder;\n        return isNullOrEmpty(outputFolder) ? fileName : HostEnv.pathCombine(outputFolder, fileName);\n    }\n    compileAndRun(templateFileName, data) {\n        let compiled;\n        if (this.lastCompiledTemplate === undefined || this.lastCompiledTemplate.templateFileName.toLowerCase() !== templateFileName.toLowerCase()) {\n            const handlebarsTemplate = this.getHandlebarFile(templateFileName);\n            const options = { knownHelpers: getKnownHelpers() };\n            // @ts-ignore\n            compiled = Handlebars.compile(handlebarsTemplate, options);\n            this.lastCompiledTemplate = {\n                templateFileName: templateFileName,\n                compiled: compiled\n            };\n        }\n        else {\n            compiled = this.lastCompiledTemplate.compiled;\n        }\n        if (isNullOrEmpty(compiled)) {\n            throw new Error(`Template '${templateFileName}' was not found !`);\n        }\n        let result = compiled(data);\n        result = result.replace(/\\t¤$/gm, \"\");\n        return result;\n    }\n}\n","import { CodeGeneratorTemplate } from \"./codeGeneratorTemplate\";\nimport { HostEnv } from \"../hostEnv\";\nimport { isNullOrEmpty } from \"../utils\";\nimport { AppError } from \"../AppError\";\nexport class CSharpResXTemplateBase extends CodeGeneratorTemplate {\n    constructor(handlebarFiles) {\n        super(handlebarFiles);\n    }\n    checkHasNamespaceName(rootModel) {\n        const key = 'namespace';\n        if (isNullOrEmpty(rootModel.host[key])) {\n            throw new AppError(`Missing value for parameter '${key}' ! \r\n                 Provide valid path to *.csproj which uses required lhq model or \r\n                 provide value for parameter '${key}' in cmd data parameters.`);\n        }\n    }\n    generate(rootModel) {\n        var _a;\n        const modelVersion = rootModel.model.model.version;\n        // if (modelVersion < 2) {\n        //     throw new AppError(`Current LHQ file version (${modelVersion}) is not supported! (min version 2 is supported)`);\n        // }\n        const defaultCompatibleTextEncoding = modelVersion < 2;\n        const modelName = rootModel.model.model.name;\n        if (this._settings.CSharp.Enabled.isTrue()) {\n            this.checkHasNamespaceName(rootModel);\n            rootModel.extra = {};\n            rootModel.extra['rootClassName'] = this.getRootCsharpClassName(rootModel);\n            const csfileContent = this.compileAndRun(this.csharpTemplateName, rootModel);\n            const csFileName = this.prepareFilePath(modelName + '.gen.cs', this._settings.CSharp);\n            HostEnv.addResultFile(csFileName, csfileContent);\n        }\n        if (this._settings.ResX.Enabled.isTrue()) {\n            rootModel.extra = {};\n            rootModel.extra['useHostWebHtmlEncode'] = isNullOrEmpty(this._settings.ResX.CompatibleTextEncoding)\n                ? defaultCompatibleTextEncoding\n                : this._settings.ResX.CompatibleTextEncoding.isTrue();\n            (_a = rootModel.model.languages) === null || _a === void 0 ? void 0 : _a.forEach(lang => {\n                if (!isNullOrEmpty(lang)) {\n                    rootModel.extra['lang'] = lang;\n                    const resxfileContent = this.compileAndRun('SharedResx', rootModel);\n                    const resxfileName = this.prepareFilePath(`${modelName}.${lang}.resx`, this._settings.ResX);\n                    HostEnv.addResultFile(resxfileName, resxfileContent);\n                }\n            });\n        }\n    }\n    loadSettings(node) {\n        var _a, _b, _c;\n        const result = {\n            CSharp: undefined,\n            ResX: undefined\n        };\n        (_a = node.childs) === null || _a === void 0 ? void 0 : _a.forEach(x => {\n            const attrs = x.attrs;\n            switch (x.name) {\n                case 'CSharp':\n                    result.CSharp = attrs;\n                    break;\n                case 'ResX':\n                    result.ResX = attrs;\n                    break;\n            }\n        });\n        if (result.CSharp === undefined) {\n            throw new Error('CSharp settings not found !');\n        }\n        if (result.ResX === undefined) {\n            throw new Error('ResX settings not found !');\n        }\n        result.CSharp.Enabled = (_b = result.CSharp.Enabled) !== null && _b !== void 0 ? _b : true.toString();\n        result.ResX.Enabled = (_c = result.ResX.Enabled) !== null && _c !== void 0 ? _c : true.toString();\n        this._settings = result;\n        return result;\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class NetCoreResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'NetCoreResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return NetCoreResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Localizer';\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class NetFwResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'NetFwResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return NetFwResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Context';\n    }\n}\n","import { CodeGeneratorTemplate } from \"./codeGeneratorTemplate\";\nimport { HostEnv } from \"../hostEnv\";\nimport { isNullOrEmpty, sortBy, valueOrDefault } from \"../utils\";\nexport class TypescriptJson01Template extends CodeGeneratorTemplate {\n    generate(rootModel) {\n        var _a;\n        const model = rootModel.model.model;\n        const modelName = model.name;\n        if (this._settings.Typescript.Enabled.isTrue()) {\n            const dtsFileContent = this.compileAndRun(TypescriptJson01Template.Id, rootModel);\n            const dtsFileName = this.prepareFilePath(modelName + '.d.ts', this._settings.Typescript);\n            HostEnv.addResultFile(dtsFileName, dtsFileContent);\n        }\n        if (this._settings.Json.Enabled.isTrue()) {\n            const metadataFileNameSuffix = valueOrDefault(this._settings.Json.MetadataFileNameSuffix, 'metadata');\n            const metadataObj = {\n                default: model.primaryLanguage,\n                languages: sortBy(rootModel.model.languages, undefined, 'asc')\n            };\n            const metadataContent = JSON.stringify(metadataObj, null, '\\t') + '\\n';\n            const metadataFileName = this.prepareFilePath(`${modelName}-${metadataFileNameSuffix}.json`, this._settings.Json);\n            HostEnv.addResultFile(metadataFileName, metadataContent);\n            rootModel.extra = {};\n            const writeEmptyValues = this._settings.Json.WriteEmptyValues.isTrue();\n            const allFilesHasLangInName = this._settings.Json.CultureCodeInFileNameForPrimaryLanguage.isTrue();\n            (_a = rootModel.model.languages) === null || _a === void 0 ? void 0 : _a.forEach(lang => {\n                if (!isNullOrEmpty(lang)) {\n                    const isPrimary = model.primaryLanguage === lang;\n                    const langName = !isPrimary || allFilesHasLangInName ? `.${lang}` : '';\n                    rootModel.extra['lang'] = lang;\n                    rootModel.extra['writeEmptyValues'] = writeEmptyValues;\n                    const jsonFileContent = this.compileAndRun('JsonPerLanguage', rootModel);\n                    const jsonfileName = this.prepareFilePath(`${modelName}${langName}.json`, this._settings.Json);\n                    HostEnv.addResultFile(jsonfileName, jsonFileContent);\n                }\n            });\n        }\n    }\n    loadSettings(node) {\n        var _a, _b, _c;\n        const result = { Typescript: undefined, Json: undefined };\n        (_a = node.childs) === null || _a === void 0 ? void 0 : _a.forEach(x => {\n            const attrs = x.attrs;\n            switch (x.name) {\n                case 'Typescript':\n                    result.Typescript = attrs;\n                    break;\n                case 'Json':\n                    result.Json = attrs;\n                    break;\n            }\n        });\n        if (result.Typescript === undefined) {\n            throw new Error('Typescript settings not found !');\n        }\n        if (result.Json === undefined) {\n            throw new Error('Json settings not found !');\n        }\n        result.Typescript.Enabled = (_b = result.Typescript.Enabled) !== null && _b !== void 0 ? _b : true.toString();\n        result.Json.Enabled = (_c = result.Json.Enabled) !== null && _c !== void 0 ? _c : true.toString();\n        this._settings = result;\n        return result;\n    }\n    static get Id() {\n        return 'TypescriptJson01';\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class WinFormsResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'WinFormsResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return WinFormsResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Context';\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class WpfResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'WpfResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return WpfResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Context';\n    }\n}\n","//const he = require('he');\n// export function htmlEncode(value: string, options: any): string {\n//     return he.encode(value, options);\n// }\nexport function getNestedPropertyValue(obj, path) {\n    return path.split('.').reduce((acc, part) => {\n        if (acc === undefined)\n            return undefined;\n        // Check if the part includes an array index like \"c[1]\"\n        const match = part.match(/^(\\w+)\\[(\\d+)]$/);\n        if (match) {\n            const [, property, index] = match;\n            // @ts-ignore\n            return Array.isArray(acc[property]) ? acc[property][index] : undefined;\n        }\n        // @ts-ignore\n        return acc[part];\n    }, obj);\n}\n/**\n * Checks if a `value` is null, undefined or empty string.\n *\n * @typeParam T - The type of the value.\n * @param value - The value to check.\n *\n * @returns `true` if the value is null, undefined or empty string, `false` otherwise.\n */\nexport function isNullOrEmpty(value) {\n    return value === null || value === undefined || value === '';\n}\nexport function sortObjectByKey(obj, sortOrder = 'asc') {\n    return Object.fromEntries(Object.entries(obj).sort(([a], [b]) => sortOrder === 'asc' ? a.localeCompare(b, 'en') : b.localeCompare(a, 'en')));\n}\nexport function sortObjectByValue(obj, predicate, sortOrder = 'asc') {\n    return Object.fromEntries(Object.entries(obj).sort(([, a], [, b]) => {\n        const aValue = predicate(a);\n        const bValue = predicate(b);\n        if (aValue < bValue) {\n            return sortOrder === 'asc' ? -1 : 1;\n        }\n        if (aValue > bValue) {\n            return sortOrder === 'asc' ? 1 : -1;\n        }\n        return 0;\n    }));\n}\nexport function sortBy(source, propName, sortOrder = 'asc') {\n    return source.concat([]).sort((a, b) => {\n        // @ts-ignore\n        const v1 = propName === undefined ? a : a[propName];\n        // @ts-ignore\n        const v2 = propName === undefined ? b : b[propName];\n        const res = v1 > v2 ? 1 : ((v2 > v1) ? -1 : 0);\n        return sortOrder === 'asc' ? res : res * -1;\n    });\n}\nexport function iterateObject(obj, callback) {\n    const entries = Object.entries(obj);\n    if (entries.length > 0) {\n        const lastIndex = entries.length - 1;\n        let index = -1;\n        for (const [key, value] of entries) {\n            index++;\n            const isLast = index == lastIndex;\n            callback(value, key, index, isLast);\n        }\n    }\n}\nconst encodingCharMaps = {\n    html: {\n        '>': '&gt;',\n        '<': '&lt;',\n        '\"': '&quot;',\n        \"'\": '&apos;',\n        '&': '&amp;'\n    },\n    xml: {\n        '>': '&gt;',\n        '<': '&lt;',\n        '&': '&amp;'\n    },\n    xml_quotes: {\n        '>': '&gt;',\n        '<': '&lt;',\n        '\"': '&quot;',\n        \"'\": '&apos;',\n        '&': '&amp;'\n    },\n    json: {\n        '\\\\': '\\\\\\\\',\n        '\"': '\\\\\"',\n        '\\b': '\\\\b',\n        '\\f': '\\\\f',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t'\n    }\n};\nexport function textEncode(str, encoder) {\n    var _a;\n    if (isNullOrEmpty(str)) {\n        return str;\n    }\n    const encodedChars = [];\n    for (let i = 0; i < str.length; i++) {\n        const ch = str.charAt(i);\n        let map = undefined;\n        if (encoder.mode === 'html') {\n            map = encodingCharMaps.html;\n        }\n        else if (encoder.mode === 'xml') {\n            map = ((_a = encoder.quotes) !== null && _a !== void 0 ? _a : true) ? encodingCharMaps.xml_quotes : encodingCharMaps.xml;\n        }\n        else {\n            map = encodingCharMaps.json;\n        }\n        if (map.hasOwnProperty(ch)) {\n            encodedChars.push(map[ch]);\n        }\n        else {\n            encodedChars.push(ch);\n        }\n    }\n    return encodedChars.join('');\n}\nexport function valueOrDefault(value, defaultValue) {\n    let result = isNullOrEmpty(value)\n        ? defaultValue\n        : value;\n    if (typeof defaultValue === 'boolean') {\n        result = valueAsBool(value);\n    }\n    return result;\n}\nexport function valueAsBool(value) {\n    switch (typeof value) {\n        case 'boolean':\n            return value;\n        case 'number':\n            return value > 0;\n        case 'string':\n            return value.toLowerCase() === 'true';\n        default:\n            return false;\n    }\n}\nexport function toBoolean(value) {\n    return value.toLowerCase() === 'true';\n}\nexport function hasItems(obj) {\n    return objCount(obj) > 0;\n}\nexport function objCount(obj) {\n    if (isNullOrEmpty(obj)) {\n        return 0;\n    }\n    if (Array.isArray(obj)) {\n        return obj.length;\n    }\n    if (typeof obj === 'object') {\n        return Object.keys(obj).length;\n    }\n    return 0;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//export * from './types';\n// export * from './utils';\nexport * from './templateManager';\n"],"names":[],"sourceRoot":""}