import {getNestedPropertyValue, isNullOrEmpty} from "./utils";
import {LhqModelResourceType, LhqModelType, TemplateRootModel} from "./types";
import {HostEnv} from "./hostEnv";

export function registerHelpers() {
    Object.keys(helpersList).forEach(key => {
        // @ts-ignore
        Handlebars.registerHelper(key, helpersList[key]);
    });
}

const helpersList: Record<string, Function> = {};
helpersList['x-header'] = header;
helpersList['x-value'] = objValue;
helpersList['x-indent'] = indent;
helpersList['x-join'] = join;
helpersList['x-concat'] = concat;
helpersList['x-replace'] = replace;
helpersList['x-trimEnd'] = trimEnd;
helpersList['x-equals'] = equals;
helpersList['x-resourceComment'] = resourceComment;

function header() {
    return `//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------`
}

function objValue(context: any, path: string) {
    const value = getNestedPropertyValue(context, path);
    return value !== undefined ? value : '';
}

function indent(count: number, options: any) {
    count = count < 0 ? 0 : count;
    // @ts-ignore
    var content = options.fn(this) as string;

    var paddedContent = content.split('\n')
        .map(line => '\t'.repeat(count) + line)
        .join('\n');

    return paddedContent;
}

/*
{{#join people delimiter=" and " start="0" end="2"}}{{name}} ({{gender}}, {{age}}){{/join}}
<h1>Jobs</h1>
{{join jobs delimiter=", " start="1" end="2"}}
*/
function join(items: any[], block: any) {
    var delimiter = block.hash.delimiter || ",",
        start = block.hash.start || 0,
        len = items ? items.length : 0,
        end = block.hash.end || len,
        out = "",
        decorator = block.hash.decorator || `"`;

    if (end > len) end = len;

    if ('function' === typeof block) {
        for (let i = start; i < end; i++) {
            if (i > start) out += delimiter;
            if ('string' === typeof items[i])
                out += items[i];
            else
                out += block(items[i]);
        }
        return out;
    } else {
        // @ts-ignore
        var res = [].concat(items).map(x => `${decorator}${x}${decorator}`).slice(start, end).join(delimiter);
        // @ts-ignore
        return new Handlebars.SafeString(res);
    }
}

// usage: {{ x-concat 'prop1' 'prop2' 'prop3' sep="," }}
function concat(...args: any[]) {
    const options = args.pop();
    const sep = options.hash.sep || ''; // Default to empty string if no separator is provided

    // @ts-ignore
    return args.filter(Boolean).join(sep);
}

function replace(value: string, block: any) {
    const what = block.hash.what || '',
        withStr = block.hash.with || '';

    if (!what || !withStr || (what === withStr)) {
        return value;
    }

    const regex = new RegExp(what, 'g');
    return value.replace(regex, withStr);
}

// usage: {{x-trimEnd fullPath "/index.html"}}
function trimEnd(input: string, endPattern: string): string {
    try {
        const regex = new RegExp(endPattern + '$');
        return input.replace(regex, '');
    } catch (error) {
        console.error('Invalid regex pattern:', endPattern);
        return input;
    }
}

// usage: {{#x-equals 'hello world' 'WorlD' cs="false" }}
// function ifEquals(input: any, value: any, block: any): boolean {
//     const cs = (block.hash.cs || "true").toString().toLowerCase() == "true";
//     const val1 = typeof input === "string" ? input : (input?.toString() ?? '');
//     const val2 = typeof value === "string" ? value : (value?.toString() ?? '');
//    
//     const equals = cs ? val1 === val2 : (val1.toLowerCase() === val2.toLowerCase());
//     if (equals) {
//         // @ts-ignore
//         return block.fn(this);
//     } else {
//         // @ts-ignore
//         return block.inverse(this);
//     }
// }

function equals(input: any, value: any, block: any): boolean {
    const cs = (block.hash.cs || "true").toString().toLowerCase() == "true";
    const val1 = typeof input === "string" ? input : (input?.toString() ?? '');
    const val2 = typeof value === "string" ? value : (value?.toString() ?? '');

    return cs ? val1 === val2 : (val1.toLowerCase() === val2.toLowerCase());
}

function resourceComment(resource: LhqModelResourceType, options: any): string {
    if (typeof resource === 'object') {
        const model = (options.hash.root as TemplateRootModel).model;
        const primaryLanguage = model?.model?.primaryLanguage ?? '';
        if (!isNullOrEmpty(primaryLanguage) && resource.values) {
            const resourceValue = resource.values[primaryLanguage]?.value;
            let propertyComment = isNullOrEmpty(resourceValue) ? resource.description : resourceValue;
            propertyComment = propertyComment.replace(/[\n\r]/g, '');
            propertyComment = propertyComment.replace(/\t/g, ' ');
            if (propertyComment.length > 80) {
                propertyComment = propertyComment.substring(0, 80);
            }
            // @ts-ignore
            return new Handlebars.SafeString(propertyComment);
        } 
    }
    
    return '';
}