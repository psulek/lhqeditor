// using HandlebarsDotNet;
// using HandlebarsDotNet.Compiler;
// using HandlebarsDotNet.Helpers;
// using LHQ.Data;
// using LHQ.Data.Interfaces;
//
// try
// {
//     var lhqFileName = "Strings.lhq";
//     var modelContext = new LHQ.Data.ModelContext(LHQ.Data.ModelContextOptions.Default);
//     var loadResult = LHQ.Data.ModelStorage.ModelSerializerManager.DeserializeFrom(lhqFileName, modelContext);
//
//     /*
//      {{> category className=../model.name category=this name=@key parent=""}}
//      
//       ----
//       
//           {{#if category.categories}}
//     {{#each category.categories}}
//     {{> category className=../className category=this name=@key parent=(String.Concat ../parent ../name) }}
//     {{/each}}
//     {{/if}}
//     {{#if category.resources}}
//     {{#each category.resources}}
//     /// <summary>
//     /// Gets localized string similar to: {{values.en.value}}
//     ///
//     </summary>
// public const string {{@key}} = "{{String.Concat parent name @key}}";
// {{/each}}
// {{/if}}
//
//       
//       
//      */
//     
//     if (loadResult.Status != LHQ.Data.ModelStorage.ModelLoadStatus.Success)
//     {
//         return;
//     }
//
//     // Handlebars.RegisterHelper("indent", (writer, context, parameters) =>
//     // {
//     //     writer.WriteSafeString();
//     // });
//     
//     Handlebars.RegisterHelper("indent", (output, options, context, args) => {
//         //var count = context.GetValue<int>("indent");
//         var category = context.GetValue<ITreeLikeElement>("category");
//         // var categoryParentLevel = category.ParentLevel;
//         //var count = category.GetParentLevel() + 1;
//
//         // var propertyName = (string)args[0];
//         // var count = context.GetValue<int>(propertyName);
//
//         var count = (int)args[0]; // + 1;
//             
//         var indentedContent = options.Template();
//         var indent = new string('\t', count);
//         var indentedLines = indentedContent
//             .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
//             .Select(line => line.Length == 0 ? line : indent + line)
//             .ToArray();
//         output.Write(
//             string.Join(Environment.NewLine, indentedLines) + Environment.NewLine + Environment.NewLine);
//     });
//
//     // Handlebars.RegisterHelper("__indent", (writer, context, parameters) => {
//     //     var count = context.GetValue<int>("indent");
//     //     for (int i = 0; i < count; i++)
//     //     {
//     //         writer.Write("\t");
//     //     }
//     // });
//         
//     var handlebarsContext = Handlebars.Create();
//     HandlebarsHelpers.Register(handlebarsContext);
//
//     var hbsRoot = "hbs";
//     var hbsTemplates = $"{hbsRoot}\\templates";
//
//     var templateFiles = Directory.GetFiles(hbsTemplates, "*.hbs");
//     foreach (var templateFile in templateFiles)
//     {
//         var name = Path.GetFileNameWithoutExtension(templateFile);
//         var templateContent = File.ReadAllText(templateFile);
//         Handlebars.RegisterTemplate(name, templateContent);    
//     }
//
//     // var template_category = File.ReadAllText(Path.Combine(hbsTemplates, "category.hbs"));
//     // Handlebars.RegisterTemplate("category", template_category);
//     
//     // Handlebars.RegisterTemplate("category", (writer, context, data) =>
//     // {
//     //     var ctx = context as BindingContext;
//     //     var dictionary = ctx.Value as HashParameterDictionary;
//     //     //ParentLevel
//     //     var category = dictionary["Category"] as ITreeLikeElement;
//     //     var parentLevel = category.GetParentLevel();
//     //
//     //     writer.Write(template_category);
//     //     writer.WriteLine("#" + parentLevel);
//     // });
//
//     var template = Handlebars.Compile(File.ReadAllText(Path.Combine(hbsRoot, "StringsKeys.hbs")));
//     var result = template(modelContext.Model);
//     File.WriteAllText("StringsKeys.cs", result);
// }
// catch (Exception e)
// {
//     Console.WriteLine(e);
//     throw;
// }
//
// // public static class ExtensionsMethods
// // {
// //     public static int GetParentLevel(this ITreeLikeElement element)
// //     {
// //         int result = 0;
// //         var current = element.Parent;
// //         while (current != null)
// //         {
// //             result++;
// //             current = current.Parent;
// //         }
// //         return result;
// //     }
// // }