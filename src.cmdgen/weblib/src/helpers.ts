import {getNestedPropertyValue} from "./utils";

export function registerHelpers() {
    Object.keys(helpersList).forEach(key => {
        // @ts-ignore
        Handlebars.registerHelper(key, helpersList[key]);
    });
}

const helpersList: Record<string, Function> = {};
helpersList['x-header'] = header;
helpersList['x-value'] = objValue;
helpersList['x-indent'] = indent;
helpersList['x-join'] = join;

function header() {
    return `//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------`
}

function objValue(context: any, path: string) {
    const value = getNestedPropertyValue(context, path);
    return value !== undefined ? value : '';
}

function indent(count: number, options: any) {
    count = count < 0 ? 0 : count;
    // @ts-ignore
    var content = options.fn(this) as string;

    var paddedContent = content.split('\n')
        .map(line => '\t'.repeat(count) + line)
        .join('\n');

    return paddedContent;
}

/*
{{#join people delimiter=" and " start="0" end="2"}}{{name}} ({{gender}}, {{age}}){{/join}}
<h1>Jobs</h1>
{{join jobs delimiter=", " start="1" end="2"}}
*/
function join(items: any[], block: any) {
    var delimiter = block.hash.delimiter || ",",
        start = block.hash.start || 0,
        len = items ? items.length : 0,
        end = block.hash.end || len,
        out = "",
        decorator = block.hash.decorator || `"`;

    if (end > len) end = len;

    if ('function' === typeof block) {
        for (let i = start; i < end; i++) {
            if (i > start) out += delimiter;
            if ('string' === typeof items[i])
                out += items[i];
            else
                out += block(items[i]);
        }
        return out;
    } else {
        // @ts-ignore
        var res = [].concat(items).map(x => `${decorator}${x}${decorator}`).slice(start, end).join(delimiter);
        // @ts-ignore
        return new Handlebars.SafeString(res);
    }
}


// Handlebars.registerHelper('lhq-cs-visibility-modifier', function () {
//     return getExtraData(this, Constants.ExtraDataKeys.CSHARP_VISIBILITY) || 'public';
// });
