import fsp from 'node:fs/promises';
import * as fse from 'fs-extra'
import { Generator } from '../generator';
import { HbsTemplateManager } from '../hbsManager';
import path from 'node:path';
import { safeJsonParse } from '../utils';
import type { GeneratedFile, LhqModel } from '../api';
import { HostEnvironmentDefault } from './hostEnv';
import { GeneratorInitialization } from '../types';
import { Duration } from '../Duration';

const fileHeader = `//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------`;

const templates = [
    'NetCoreResxCsharp01',
    'NetResx',
    'TypescriptJson01',
    'TypescriptJson01Json',
    'NetFwResxCsharp01',
    'WpfResxCsharp01',
    'WinFormsResxCsharp01'
];


export async function generateFromLhq(lhqFileName: string): Promise<void> {
    const generatorInit: GeneratorInitialization = {
        hbsTemplates: {},
        hostEnvironment: new HostEnvironmentDefault()
    };

    const templateLoaders = templates.map(async (templateId) => {
        generatorInit.hbsTemplates[templateId] = await readHbsFile(templateId + '.hbs');
    });

    await Promise.all(templateLoaders);

    const lhqFile = await fsp.readFile(lhqFileName, { encoding: 'utf-8' });
    const model = safeJsonParse<LhqModel>(lhqFile);

    Generator.initialize(generatorInit);
    const generator = new Generator();
    const hostData = {
        'namespace': 'Root',
        'fileHeader': fileHeader
    };
    const duration = Duration.start();
    const result = generator.generate({ fileName: lhqFileName, model }, hostData);
    console.log(`Generated ${result.generatedFiles.length} files in ${duration.elapsedTime}.\n------------\n`);

    const name = path.parse(lhqFileName).name;
    const output = path.resolve(__dirname, '../../temp/' + name);

    const saveFilesMap = result.generatedFiles.map(async (file) => {
        await saveGenFile(generator, file, output);
        console.log(`Saved file ${file.fileName}.`);
    });

    await Promise.all(saveFilesMap);
}

async function saveGenFile(generator: Generator, generatedFile: GeneratedFile, outputPath?: string): Promise<void> {
    const content = generator.getFileContent(generatedFile, true);
    const bom = generatedFile.bom ? '\uFEFF' : '';
    const encodedText = Buffer.from(bom + content, 'utf8');

    const fileName = !outputPath ? generatedFile.fileName : path.join(outputPath, generatedFile.fileName);
    const dir = path.dirname(fileName);

    await fse.ensureDir(dir);

    /* if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
    } */

    await fsp.writeFile(fileName, encodedText, { encoding: 'utf8' });


    // async function write(): Promise<void> {
    //     return new Promise((resolve, reject) => {
    //         const writeStream = fs.createWriteStream(fileName, { encoding: 'utf8' });
    //         writeStream.write(encodedText);
    //         writeStream.once('finish', resolve);
    //         writeStream.once('error', reject);
    //         writeStream.end();
    //     });
    // }

    // await write();

    // Alternatively, using async/await with fs.promises:
    // import * as fsPromises from 'fs/promises';
    // await fsPromises.writeFile(fileName, encodedText, { encoding: 'utf8' });
}

async function readHbsFile(fileName: string): Promise<string> {
    const file = path.resolve(__dirname, '..', 'hbs', fileName);
    return await fsp.readFile(file, { encoding: 'utf-8' });
}