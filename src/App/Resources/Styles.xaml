<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:code="clr-namespace:LHQ.App.Code"
    xmlns:converters="clr-namespace:LHQ.App.Components.Converters"
    xmlns:data="clr-namespace:LHQ.Data;assembly=LHQ.Data"
    xmlns:fa="http://schemas.fontawesome.io/icons/">

    <Color x:Key="DefaultTextColor">#2a2a2a</Color>
    <Color x:Key="HighlightBgColor">WhiteSmoke</Color>
    <FontFamily x:Key="DefaultFontFamily">Segoe UI</FontFamily>

    <converters:TreeElementToStateBrushConverter x:Key="TreeElementToStateBrushConverter" />

    <Style x:Key="ErrorTextBlock" TargetType="TextBlock">
        <Setter Property="FontSize" Value="10pt" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="OrangeRed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Orange" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconAutoTranslatedStyle" TargetType="fa:ImageAwesome">
        <Setter Property="Icon" Value="Font" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="LightSkyBlue" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconLockedStyle" TargetType="fa:ImageAwesome">
        <Setter Property="Icon" Value="Lock" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Tan" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="ModelIconColorLight" Color="DarkViolet" />
    <SolidColorBrush x:Key="ModelIconColorDark" Color="DeepSkyBlue" />

    <SolidColorBrush x:Key="CategoryIconColorLight" Color="SandyBrown" />
    <SolidColorBrush x:Key="CategoryIconColorDark" Color="SandyBrown" />

    <SolidColorBrush x:Key="ResourceIconColorLight" Color="LightSteelBlue" />
    <SolidColorBrush x:Key="ResourceIconColorDark" Color="WhiteSmoke" />

    <Style x:Key="IconTreeElementStyle" TargetType="fa:ImageAwesome">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ElementType}" Value="Model">
                <Setter Property="Icon" Value="Home" />
                <Setter Property="Foreground" Value="{Binding Path=ModelElementIconBrush, Source={x:Static code:VisualManager.Instance}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ElementType}" Value="Category">
                <Setter Property="Foreground" Value="{Binding Path=CategoryElementIconBrush, Source={x:Static code:VisualManager.Instance}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ElementType}" Value="Resource">
                <Setter Property="Icon" Value="File" />
                <Setter Property="Foreground" Value="{Binding Path=ResourceElementIconBrush, Source={x:Static code:VisualManager.Instance}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ElementType}" Value="Category" />
                    <Condition Binding="{Binding Path=IsExpanded}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Icon" Value="FolderOpen" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ElementType}" Value="Category" />
                    <Condition Binding="{Binding Path=IsExpanded}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Icon" Value="Folder" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ResourceStateBorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush, Source={x:Static code:VisualManager.Instance}}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <Style
        x:Key="TreeResourceStateBorderStyle"
        BasedOn="{StaticResource ResourceStateBorderStyle}"
        TargetType="Border">
        <Setter Property="Width" Value="8" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Background" Value="{Binding Path=State, Converter={StaticResource TreeElementToStateBrushConverter}}" />
    </Style>

    <Style
        x:Key="MultiSelectionTreeResourceStateBorderStyle"
        BasedOn="{StaticResource ResourceStateBorderStyle}"
        TargetType="Border">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Background" Value="{Binding Path=Tag, Converter={StaticResource TreeElementToStateBrushConverter}}" />
    </Style>

    <Style
        x:Key="ResourceStateNewBorderStyle"
        BasedOn="{StaticResource ResourceStateBorderStyle}"
        TargetType="Border">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Background" Value="{Binding Converter={StaticResource TreeElementToStateBrushConverter}, ConverterParameter={x:Static data:ResourceElementTranslationState.New}}" />
    </Style>

    <Style
        x:Key="ResourceStateEditedBorderStyle"
        BasedOn="{StaticResource ResourceStateBorderStyle}"
        TargetType="Border">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Background" Value="{Binding Converter={StaticResource TreeElementToStateBrushConverter}, ConverterParameter={x:Static data:ResourceElementTranslationState.Edited}}" />
    </Style>

    <Style
        x:Key="ResourceStateNeedsReviewBorderStyle"
        BasedOn="{StaticResource ResourceStateBorderStyle}"
        TargetType="Border">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Background" Value="{Binding Converter={StaticResource TreeElementToStateBrushConverter}, ConverterParameter={x:Static data:ResourceElementTranslationState.NeedsReview}}" />
    </Style>

    <Style
        x:Key="ResourceStateFinalBorderStyle"
        BasedOn="{StaticResource ResourceStateBorderStyle}"
        TargetType="Border">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Background" Value="{Binding Converter={StaticResource TreeElementToStateBrushConverter}, ConverterParameter={x:Static data:ResourceElementTranslationState.Final}}" />
    </Style>

    <SolidColorBrush x:Key="CheckColorBrushLight" Color="LimeGreen" />
    <SolidColorBrush x:Key="CheckColorBrushDark" Color="LawnGreen" />

    <SolidColorBrush x:Key="DefaultColorBrush" Color="{StaticResource DefaultTextColor}" />
    <SolidColorBrush x:Key="HighlightBgColorBrush" Color="{StaticResource HighlightBgColor}" />
    <SolidColorBrush x:Key="ReadonlyColorBrush" Color="#fdfdfd" />

    <SolidColorBrush x:Key="ResourceStateNewLight" Color="Yellow" />
    <SolidColorBrush x:Key="ResourceStateEditedLight" Color="Silver" />
    <SolidColorBrush x:Key="ResourceStateNeedsReviewLight" Color="DeepSkyBlue" />
    <SolidColorBrush x:Key="ResourceStateFinalLight" Color="LimeGreen" />

    <SolidColorBrush x:Key="ResourceStateNewDark" Color="Yellow" />
    <SolidColorBrush x:Key="ResourceStateEditedDark" Color="Silver" />
    <SolidColorBrush x:Key="ResourceStateNeedsReviewDark" Color="DeepSkyBlue" />
    <SolidColorBrush x:Key="ResourceStateFinalDark" Color="LimeGreen" />

    <Style x:Key="BusyRectangleStyle" TargetType="Rectangle">
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Fill" Value="White" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Fill" Value="Gray" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="TreeSearchBusyRectangleStyle"
        BasedOn="{StaticResource BusyRectangleStyle}"
        TargetType="Rectangle">
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ProjectBusyOperation}" Value="TreeSearch">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BusyIconColor" TargetType="fa:ImageAwesome">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="CornflowerBlue" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="WhiteSmoke" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="TreeSearchBusyIconColor"
        BasedOn="{StaticResource BusyIconColor}"
        TargetType="fa:ImageAwesome">
        <Setter Property="Spin" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ProjectBusyOperation}" Value="TreeSearch">
                <Setter Property="Spin" Value="True" />
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BusyBorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="Gainsboro" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="1" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Background" Value="White" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Background" Value="Gray" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HorizontalLineBorderStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderBrush" Value="White" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="BorderBrush" Value="Gainsboro" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="BorderBrush" Value="Gainsboro" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BulletListEllipseBorderStyle" TargetType="Ellipse">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="5" />
        <Setter Property="StrokeThickness" Value="1" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Fill" Value="Gray" />
                <Setter Property="Stroke" Value="Gray" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Fill" Value="White" />
                <Setter Property="Stroke" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--
    <Style x:Key="TreeSearchBusyBorderStyle"
           BasedOn="{StaticResource BusyBorderStyle}"
           TargetType="Border">
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Effect" Value="{x:Null}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ProjectBusyOperation}"
                         Value="TreeSearch">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>-->

    <Style
        x:Key="HyperlinkStyle"
        BasedOn="{StaticResource {x:Type Hyperlink}}"
        TargetType="{x:Type Hyperlink}">
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Orange" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="HyperlinkDisabledStyle"
        BasedOn="{StaticResource {x:Type Hyperlink}}"
        TargetType="{x:Type Hyperlink}">
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
        <Setter Property="FontSize" Value="10pt" />
        <Setter Property="BaselineAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Silver" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StatusBarTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="10pt" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="Gray" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Silver" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="TextBoxStyle"
        x:Shared="True"
        TargetType="TextBox">
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=SelectionInActiveBrush, Source={x:Static code:VisualManager.Instance}}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=BackgroundBrush, Source={x:Static code:VisualManager.Instance}}" />
            </MultiDataTrigger>
        </Style.Triggers>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True" ToolTip="{Binding ElementName=controlWithError, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}">
                        <TextBlock
                            Margin="-15,0,0,0"
                            DockPanel.Dock="Right"
                            Style="{DynamicResource ErrorTextBlock}">
                            *
                        </TextBlock>
                        <Border BorderThickness="0,0,0,1">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                                            <Setter Property="BorderBrush" Value="OrangeRed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                                            <Setter Property="BorderBrush" Value="Orange" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <AdornedElementPlaceholder Name="controlWithError" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContentBackgroundBorder" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Background" Value="#FF727272" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LockedBackgroundStyle" TargetType="Control">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ErrorStyle" TargetType="Control">
        <Setter Property="FontSize" Value="10pt" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="OrangeRed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Orange" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InfoStyle" TargetType="Label">
        <Setter Property="FontSize" Value="10pt" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Foreground" Value="DarkMagenta" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Foreground" Value="Bisque" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HintPanelStyle" TargetType="Border">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Light">
                <Setter Property="Background" Value="Beige" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Theme, Source={x:Static code:VisualManager.Instance}}" Value="Dark">
                <Setter Property="Background" Value="DarkCyan" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="ComboBox" />

    <Style x:Key="ItemsControlItemStyle" TargetType="ListBoxItem">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
</ResourceDictionary>