{"version":3,"file":"lhqgenerators.js","mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACbmJ;AAC/G;AAC7B;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAW;AAC3B;AACA;AACA;AACA,yBAAyB,kDAAU,oDAAoD;AACvF;AACA,yBAAyB,IAAI,GAAG,SAAS,IAAI,SAAS,UAAU,8BAA8B;AAC9F,YAAY,6CAAO,aAAa,QAAQ,EAAE,kCAAkC;AAC5E;AACA;AACA,gDAAgD,WAAW,eAAe,mCAAmC,UAAU,8BAA8B;AACrJ;AACA,8BAA8B,OAAO,eAAe,mCAAmC,UAAU,8BAA8B;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAO,aAAa,OAAO,YAAY,6BAA6B;AAC5E;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAO,qBAAqB,IAAI,iBAAiB,yBAAyB;AAClF,KAAK;AACL,IAAI,6CAAO,sCAAsC,8BAA8B;AAC/E;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS,QAAQ,wBAAwB,MAAM,cAAc;AAC1E,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oDAAoD,OAAO,GAAG,QAAQ,IAAI,KAAK,GAAG;AACpF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa,IAAI,YAAY,WAAW,wBAAwB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU,EAAE,EAAE,EAAE,UAAU;AACzE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yFAAyF;AACzF,iEAAiE,qDAAa;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qDAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAO;AACf;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B;AACA,kCAAkC,qDAAa;AAC/C;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB,IAAI,wCAAwC;AACvG;AACA,+JAA+J,GAAG,IAAI,GAAG;AACzK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAkE;AAC7F;AACA;AACA,WAAW,8CAAM;AACjB;AACA;AACA;AACA;AACA,WAAW,uDAAe;AAC1B;AACA;AACA,WAAW,gDAAQ;AACnB;AACA;AACA,WAAW,gDAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,cAAc,kDAAU,QAAQ,oBAAoB;AACpD;AACA;AACA;AACA;AACA,QAAQ,qDAAa;AACrB;AACA;AACA,oBAAoB,6CAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qDAAa;AACxB;AACA;AACA,YAAY,qDAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAa;AACrB;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9YA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,8CAA8C,KAAK,kBAAkB,QAAQ;AAC7E;AACA;AACA,uCAAuC,KAAK,mBAAmB,QAAQ;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,MAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACwF;AAClB;AACM;AACJ;AACM;AACV;AACkB;AACtF;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE,oBAAoB,qCAAqC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAqB;AACjC,YAAY,6DAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oJAAoJ,QAAQ,2HAA2H;AACvR;AACA,0FAA0F,QAAQ,sHAAsH;AACxN;AACA;AACA,+CAA+C,QAAQ,uGAAuG;AAC9J;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uDAAe;AAC3D,gBAAgB,qDAAa;AAC7B;AACA;AACA;AACA;AACA,mDAAmD,gDAAQ;AAC3D,kDAAkD,gDAAQ;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C,uDAAe;AAC1D,gBAAgB,qDAAa;AAC7B;AACA;AACA;AACA,mDAAmD,gDAAQ;AAC3D;AACA;AACA,8CAA8C,yDAAiB;AAC/D,wBAAwB,qDAAa;AACrC;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gDAAQ;AAC/C,sCAAsC,gDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,+EAAwB,MAAM,+EAAwB;AAC3D,KAAK,qFAA2B,MAAM,qFAA2B;AACjE,KAAK,iFAAyB,MAAM,iFAAyB;AAC7D,KAAK,uFAA4B,MAAM,uFAA4B;AACnE,KAAK,6EAAuB,MAAM,6EAAuB;AACzD;;;;;;;;;;;;;;;;;;AC/HqE;AAChC;AAC6B;AAC3D;AACP;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,aAAa;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAa,4BAA4B,6CAAO;AAC/D;AACA;AACA;AACA,QAAQ,6CAAO;AACf;AACA;AACA;AACA,yCAAyC,sDAAc;AACvD,qCAAqC,sDAAc;AACnD;AACA;AACA;AACA;AACA,aAAa,qDAAa;AAC1B,kBAAkB,kDAAU;AAC5B;AACA,QAAQ,6CAAO;AACf;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc,yDAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAa;AACzB,yCAAyC,iBAAiB;AAC1D;AACA,QAAQ,6DAAmB;AAC3B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1DgE;AAC3B;AACoB;AAClB;AAChC,qCAAqC,yEAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAa;AACzB,sBAAsB,+CAAQ,iCAAiC,IAAI;AACnE;AACA,qDAAqD,IAAI;AACzD;AACA;AACA;AACA,QAAQ,6CAAO;AACf;AACA;AACA;AACA;AACA,+DAA+D,aAAa;AAC5E;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAa;AAClC;AACA;AACA,iEAAiE,UAAU,GAAG,KAAK;AACnF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sDAAc;AAC3D;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnFkE;AAC3D,0CAA0C,2EAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXkE;AAC3D,wCAAwC,2EAAsB;AACrE;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACZgE;AACC;AAC1D,uCAAuC,yEAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAM;AACjC;AACA;AACA,6DAA6D,UAAU,GAAG,uBAAuB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAa;AAClC;AACA,+EAA+E,KAAK;AACpF;AACA;AACA;AACA,iEAAiE,UAAU,EAAE,SAAS;AACtF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sDAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvEkE;AAC3D,2CAA2C,2EAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCkE;AAC3D,sCAAsC,2EAAsB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,oBAAoB;AACpB,oBAAoB;AACpB,mBAAmB;AACnB,KAAK;AACL;AACA,kBAAkB;AAClB,kBAAkB;AAClB,mBAAmB;AACnB,KAAK;AACL;AACA,kBAAkB;AAClB,kBAAkB;AAClB,oBAAoB;AACpB,oBAAoB;AACpB,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA,8CAA8C,OAAO,aAAa,oBAAoB;AACtF;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;UCrKA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACkC","sources":["webpack://LhqGenerators/./src/AppError.ts","webpack://LhqGenerators/./src/helpers.ts","webpack://LhqGenerators/./src/hostEnv.ts","webpack://LhqGenerators/./src/templateManager.ts","webpack://LhqGenerators/./src/templates/codeGeneratorTemplate.ts","webpack://LhqGenerators/./src/templates/csharpResXTemplateBase.ts","webpack://LhqGenerators/./src/templates/netCoreResxCsharp.ts","webpack://LhqGenerators/./src/templates/netFwResxCsharp.ts","webpack://LhqGenerators/./src/templates/typescriptJson.ts","webpack://LhqGenerators/./src/templates/winFormsResxCsharp.ts","webpack://LhqGenerators/./src/templates/wpfResxCsharp.ts","webpack://LhqGenerators/./src/utils.ts","webpack://LhqGenerators/webpack/bootstrap","webpack://LhqGenerators/webpack/runtime/define property getters","webpack://LhqGenerators/webpack/runtime/hasOwnProperty shorthand","webpack://LhqGenerators/webpack/runtime/make namespace object","webpack://LhqGenerators/./src/index.ts"],"sourcesContent":["export class AppError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.message = message;\n        this.name = 'AppError';\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, AppError);\n        }\n        if (stack !== undefined && stack !== null) {\n            this.stack = stack;\n        }\n    }\n}\n","import { copyObject, getNestedPropertyValue, hasItems, isNullOrEmpty, objCount, sortBy, sortObjectByKey, textEncode, valueAsBool, } from \"./utils\";\nimport { HostEnv } from \"./hostEnv\";\nexport function registerHelpers() {\n    Object.keys(helpersList).forEach(key => {\n        // @ts-ignore\n        Handlebars.registerHelper(key, helpersList[key]);\n        //const fn = helpersList[key];\n        //Handlebars.registerHelper(key, () => debugLogAndExec(key, fn, ...arguments));\n    });\n    clearHelpersContext();\n}\nconst helpersList = {\n    'x-header': headerHelper,\n    'x-value': objValueHelper,\n    'x-indent': indentHelper,\n    'x-join': joinHelper,\n    'x-concat': concatHelper,\n    'x-replace': replaceHelper,\n    'x-trimEnd': trimEndHelper,\n    'x-equals': equalsHelper,\n    'x-isTrue': isTrueHelper,\n    'x-isFalse': isFalseHelper,\n    'x-resourceComment': resourceCommentHelper,\n    'x-resourceValue': resourceValueHelper,\n    'x-resourceHasLang': resourceHasLangHelper,\n    'x-resourceParamNames': resourceParamNamesHelper,\n    'x-merge': mergeHelper,\n    'x-sortBy': sortByHelper,\n    'x-sortObject': sortObjectByKeyHelper,\n    'x-objCount': objCountHelper,\n    'x-hasItems': hasItemsHelper,\n    'x-textEncode': textEncodeHelper,\n    'x-host-webHtmlEncode': hostWebHtmlEncodeHelper,\n    'x-render': renderHelper,\n    'x-isNullOrEmpty': isNullOrEmptyHelper,\n    'x-isNotNullOrEmpty': isNotNullOrEmptyHelper,\n    'x-fn': callFunctionHelper,\n    'x-logical': logicalHelper,\n    'x-debugLog': debugLogHelper,\n    'x-var': returnVarFromTempHelper\n};\nexport function getKnownHelpers() {\n    return Object.fromEntries(Object.keys(helpersList).map(key => [key, true]));\n}\nlet dbgCounter = 0;\nlet globalVarTemp = {};\nlet helpersTimeTaken = {};\nconst trackHelperTimes = false;\nexport function clearHelpersContext() {\n    dbgCounter = 0;\n    globalVarTemp = {};\n    //helpersTimeTaken = {};\n}\nfunction debugLogAndExec(helperName, fn, ...args) {\n    var _a, _b, _c, _d, _e, _f;\n    let debug = false;\n    let header = '';\n    let cnt = 0;\n    if (arguments.length > 0) {\n        const ctx = arguments[arguments.length - 1];\n        debug = valueAsBool((_b = (_a = ctx.hash) === null || _a === void 0 ? void 0 : _a._debug) !== null && _b !== void 0 ? _b : false);\n        if (debug) {\n            cnt = ++dbgCounter;\n            const debugLog = ((_d = (_c = ctx.hash) === null || _c === void 0 ? void 0 : _c._debugLog) !== null && _d !== void 0 ? _d : '').toString();\n            const hash = copyObject((_e = ctx.hash) !== null && _e !== void 0 ? _e : {}, ['_debug', '_debugLog']);\n            const restArgs = Array.from(args).slice(0, -1);\n            header = `[${cnt}#${ctx.name}](${debugLog}) hash: ${JSON.stringify(hash, null, 0)}`;\n            HostEnv.debugLog(`${header} ${JSON.stringify(restArgs, null, 0)}`);\n        }\n    }\n    //HostEnv.debugLog(`[debugLogAndExec] fn: ${typeof fn} , arguments: ${JSON.stringify(arguments, null, 0)}, args: ${JSON.stringify(args, null, 0)}`);\n    if (debug) {\n        //HostEnv.debugLog(`${header}, arguments: ${JSON.stringify(arguments, null, 0)}, args: ${JSON.stringify(args, null, 0)}`);\n    }\n    let start = 0;\n    if (trackHelperTimes) {\n        start = Date.now();\n    }\n    // @ts-ignore\n    const res = fn.call(this, ...args);\n    if (trackHelperTimes) {\n        const duration = Date.now() - start;\n        helpersTimeTaken[helperName] = ((_f = helpersTimeTaken[helperName]) !== null && _f !== void 0 ? _f : 0) + duration;\n    }\n    if (debug) {\n        HostEnv.debugLog(`${header}, result: ${JSON.stringify(res, null, 0)}`);\n    }\n    return res;\n}\nexport function debugHelpersTimeTaken() {\n    if (!trackHelperTimes) {\n        return;\n    }\n    let totalDuration = 0;\n    Object.keys(helpersTimeTaken).forEach(key => {\n        var _a;\n        const duration = (_a = helpersTimeTaken[key]) !== null && _a !== void 0 ? _a : 0;\n        totalDuration += duration;\n        HostEnv.debugLog(`helper '${key}' taken total: ${formatDuration(duration)}`);\n    });\n    HostEnv.debugLog(`All helpers taken total: ${formatDuration(totalDuration)}`);\n}\nfunction formatDuration(ms) {\n    const seconds = Math.floor(ms / 1000);\n    const milliseconds = ms % 1000;\n    return seconds > 0\n        ? `${seconds} second${seconds > 1 ? 's' : ''} and ${milliseconds} ms`\n        : `${milliseconds} ms`;\n}\nfunction headerHelper() {\n    return `//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool - Localization HQ Editor.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------`;\n}\nfunction objValueHelper(context, path) {\n    const value = getNestedPropertyValue(context, path);\n    return value !== undefined ? value : '';\n}\nfunction indentHelper(count, options) {\n    count = count < 0 ? 0 : count;\n    // @ts-ignore\n    var content = options.fn(this);\n    var paddedContent = content.split('\\n')\n        .map(line => '\\t'.repeat(count) + line)\n        .join('\\n');\n    return paddedContent;\n}\n/*\n{{#join people delimiter=\" and \" start=\"0\" end=\"2\"}}{{name}} ({{gender}}, {{age}}){{/join}}\n<h1>Jobs</h1>\n{{join jobs delimiter=\", \" start=\"1\" end=\"2\"}}\n*/\nfunction joinHelper(items, options) {\n    // if (dbgCounter === 0) {\n    //     dbgCounter = 1;\n    //     // @ts-ignore\n    //     HostEnv.debugLog(`[joinHelper] items: ${typeof items}, ${items.name} options: ${JSON.stringify(options)}`);\n    // }\n    var _a, _b, _c, _d;\n    var delimiter = ((_a = options.hash) === null || _a === void 0 ? void 0 : _a.delimiter) || \",\", start = ((_b = options.hash) === null || _b === void 0 ? void 0 : _b.start) || 0, len = items ? items.length : 0, end = ((_c = options.hash) === null || _c === void 0 ? void 0 : _c.end) || len, out = \"\", decorator = ((_d = options.hash) === null || _d === void 0 ? void 0 : _d.decorator) || `\"`;\n    if (end > len)\n        end = len;\n    if ('function' === typeof options) {\n        for (let i = start; i < end; i++) {\n            if (i > start)\n                out += delimiter;\n            if ('string' === typeof items[i])\n                out += items[i];\n            else\n                out += options(items[i]);\n        }\n        return out;\n    }\n    else {\n        // @ts-ignore\n        var res = [].concat(items).map(x => `${decorator}${x}${decorator}`).slice(start, end).join(delimiter);\n        // @ts-ignore\n        return new Handlebars.SafeString(res);\n    }\n}\n// usage: {{ x-concat 'prop1' 'prop2' 'prop3' sep=\",\" }}\nfunction concatHelper(...args) {\n    var _a;\n    const options = args.pop();\n    const sep = ((_a = options.hash) === null || _a === void 0 ? void 0 : _a.sep) || ''; // Default to empty string if no separator is provided\n    return saveResultToTempData(options, () => args.filter(x => !isNullOrEmpty(x)).join(sep));\n    //return saveResultToTempData(() => args.filter(x => !isNullOrEmpty(x)).join(sep), ...arguments);\n    // @ts-ignore\n    //return args.filter(x => !isNullOrEmpty(x)).join(sep);\n}\nfunction saveResultToTempData(options, fn) {\n    var _a;\n    const res = fn();\n    const varName = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.var;\n    if (!isNullOrEmpty(varName)) {\n        globalVarTemp[varName] = res;\n    }\n    return res;\n}\n// function saveResultToTempData(fn: Function, ...args: any): any {\n//     // @ts-ignore\n//     const res = fn.call(this, ...args);\n//     if (arguments.length > 0) {\n//         const ctx = arguments[arguments.length - 1] as HbsDataContext;\n//         const varName = ctx?.hash?.var;\n//\n//         if (!isNullOrEmpty(varName)) {\n//             ctx.data['temp'] = ctx.data['temp'] ?? {};\n//             // @ts-ignore\n//             ctx.data['temp'][varName] = res;\n//         }\n//     }\n//    \n//     return res;\n// }\nfunction replaceHelper(value, options) {\n    var _a, _b;\n    const what = ((_a = options.hash) === null || _a === void 0 ? void 0 : _a.what) || '', withStr = ((_b = options.hash) === null || _b === void 0 ? void 0 : _b.with) || '';\n    if (!what || !withStr || (what === withStr)) {\n        return value;\n    }\n    const regex = new RegExp(what, 'g');\n    return value.replace(regex, withStr);\n}\n// usage: {{x-trimEnd fullPath \"/index.html\"}}\nfunction trimEndHelper(input, endPattern) {\n    try {\n        const regex = new RegExp(endPattern + '$');\n        return input.replace(regex, '');\n    }\n    catch (error) {\n        HostEnv.debugLog('Invalid regex pattern:' + endPattern);\n        return input;\n    }\n}\nfunction equalsHelper(input, value, options) {\n    const { cs, val1, val2 } = getDataForCompare(input, value, options);\n    return cs ? val1 === val2 : (val1.toLowerCase() === val2.toLowerCase());\n}\nfunction isTrueHelper(input) {\n    return input === true;\n}\nfunction isFalseHelper(input) {\n    return input === false;\n}\nfunction getDataForCompare(input, value, options) {\n    var _a, _b, _c;\n    const cs = (((_a = options.hash) === null || _a === void 0 ? void 0 : _a.cs) || \"true\").toString().toLowerCase() == \"true\";\n    const val1 = typeof input === \"string\" ? input : ((_b = input === null || input === void 0 ? void 0 : input.toString()) !== null && _b !== void 0 ? _b : '');\n    const val2 = typeof value === \"string\" ? value : ((_c = value === null || value === void 0 ? void 0 : value.toString()) !== null && _c !== void 0 ? _c : '');\n    return { cs: cs, val1, val2 };\n}\nfunction logicalHelper(input, value, options) {\n    var _a;\n    const op = (((_a = options.hash) === null || _a === void 0 ? void 0 : _a.op) || 'and').toLowerCase();\n    if (op === 'and') {\n        //return input === value;\n        return (input === true) && (value === true);\n    }\n    else if (op === 'or') {\n        //return input || value;\n        return (input === true) || (value === true);\n    }\n    return false;\n}\nfunction trimComment(value) {\n    if (isNullOrEmpty(value)) {\n        return '';\n    }\n    let trimmed = false;\n    var idxNewLine = value.indexOf('\\r\\n');\n    if (idxNewLine == -1) {\n        idxNewLine = value.indexOf('\\n');\n    }\n    if (idxNewLine == -1) {\n        idxNewLine = value.indexOf('\\r');\n    }\n    if (idxNewLine > -1) {\n        value = value.substring(0, idxNewLine);\n        trimmed = true;\n    }\n    if (value.length > 80) {\n        value = value.substring(0, 80);\n        trimmed = true;\n    }\n    if (trimmed) {\n        value += \"...\";\n    }\n    return value.replace('\\t', ' ');\n}\nfunction resourceCommentHelper(resource, options) {\n    var _a, _b, _c, _d;\n    if (typeof resource === 'object') {\n        const model = ((_a = options.hash) === null || _a === void 0 ? void 0 : _a.root).model;\n        const primaryLanguage = (_c = (_b = model === null || model === void 0 ? void 0 : model.model) === null || _b === void 0 ? void 0 : _b.primaryLanguage) !== null && _c !== void 0 ? _c : '';\n        if (!isNullOrEmpty(primaryLanguage) && resource.values) {\n            const resourceValue = (_d = resource.values[primaryLanguage]) === null || _d === void 0 ? void 0 : _d.value;\n            let propertyComment = isNullOrEmpty(resourceValue) ? resource.description : resourceValue;\n            //try {\n            propertyComment = trimComment(propertyComment);\n            // }\n            // catch(err) {\n            //     const s1 = `res_value_${primaryLanguage}: ${resource.values[primaryLanguage]?.value}`;\n            //     const s2 = 'res_name: ' + resource.getName!();\n            //     HostEnv.debugLog('[resourceCommentHelper] failed for: ' + (isNullOrEmpty(propertyComment) ? 'null': JSON.stringify(propertyComment)) + `, ${s1}, ${s2}`);\n            // }\n            // @ts-ignore\n            return new Handlebars.SafeString(propertyComment);\n        }\n    }\n    return '';\n}\nfunction resourceValueHelper(resource, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (typeof resource === 'object') {\n        const lang = (_b = (_a = options.hash) === null || _a === void 0 ? void 0 : _a.lang) !== null && _b !== void 0 ? _b : '';\n        const trim = (_d = (_c = options.hash) === null || _c === void 0 ? void 0 : _c.trim) !== null && _d !== void 0 ? _d : false;\n        if (!isNullOrEmpty(lang)) {\n            const res = (_g = (_f = (_e = resource === null || resource === void 0 ? void 0 : resource.values) === null || _e === void 0 ? void 0 : _e[lang]) === null || _f === void 0 ? void 0 : _f.value) !== null && _g !== void 0 ? _g : '';\n            return trim ? res.trim() : res;\n        }\n    }\n    return '';\n}\nfunction resourceHasLangHelper(resource, options) {\n    var _a, _b;\n    if (typeof resource === 'object') {\n        const lang = (_b = (_a = options.hash) === null || _a === void 0 ? void 0 : _a.lang) !== null && _b !== void 0 ? _b : '';\n        if (!isNullOrEmpty(lang) && resource.values && resource.values[lang]) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction resourceParamNamesHelper(resource, options) {\n    var _a, _b;\n    if (typeof resource === 'object' && resource.parameters) {\n        const withTypes = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.withTypes) !== null && _b !== void 0 ? _b : false;\n        return Object.keys(resource.parameters).map(key => {\n            return withTypes ? `object ${key}` : key;\n        }).join(',');\n    }\n    return '';\n}\nfunction mergeHelper(context, options) {\n    var _a;\n    return Object.assign({}, context, (_a = options.hash) !== null && _a !== void 0 ? _a : {});\n}\nfunction sortByHelper(source, propName, sortOrder = 'asc') {\n    return sortBy(source, propName, sortOrder);\n}\nfunction sortObjectByKeyHelper(obj, options) {\n    var _a, _b;\n    const sortOrder = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.sortOrder) !== null && _b !== void 0 ? _b : 'asc';\n    return sortObjectByKey(obj, sortOrder);\n}\nfunction objCountHelper(obj) {\n    return objCount(obj);\n}\nfunction hasItemsHelper(obj) {\n    return hasItems(obj);\n}\nfunction textEncodeHelper(str, options) {\n    var _a, _b, _c, _d;\n    const mode = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : 'html';\n    const quotes = (_d = (_c = options === null || options === void 0 ? void 0 : options.hash) === null || _c === void 0 ? void 0 : _c.quotes) !== null && _d !== void 0 ? _d : false;\n    const s = textEncode(str, { mode: mode, quotes });\n    // @ts-ignore\n    return new Handlebars.SafeString(s);\n}\nfunction hostWebHtmlEncodeHelper(str) {\n    if (isNullOrEmpty(str)) {\n        return str;\n    }\n    const encoded = HostEnv.webHtmlEncode(str);\n    // @ts-ignore\n    return new Handlebars.SafeString(encoded);\n}\nfunction renderHelper(input, options) {\n    var _a, _b;\n    const when = (_b = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.when) !== null && _b !== void 0 ? _b : true;\n    // @ts-ignore\n    return when ? input : '';\n}\nfunction isNullOrEmptyHelper(value) {\n    return isNullOrEmpty(value);\n}\nfunction isNotNullOrEmptyHelper(input) {\n    return !isNullOrEmpty(input);\n}\nfunction callFunctionHelper(fn, ...args) {\n    let fnArgs = undefined;\n    if (arguments.length > 0) {\n        //const ctx = arguments[arguments.length - 1] as HbsDataContext;\n        fnArgs = Array.from(args).slice(0, -1);\n    }\n    return fnArgs === undefined ? fn() : fn(...fnArgs);\n}\n// function callFunctionHelper(fn: any): any {\n//     return fn();\n// }\nfunction debugLogHelper(...args) {\n    HostEnv.debugLog(args.join(' '));\n    return '';\n}\nfunction returnVarFromTempHelper(name, options) {\n    var _a, _b;\n    //const name = options?.hash?.name;\n    const defaultVal = (_a = options === null || options === void 0 ? void 0 : options.hash) === null || _a === void 0 ? void 0 : _a.default;\n    if (isNullOrEmpty(name)) {\n        return '';\n    }\n    return (_b = globalVarTemp[name]) !== null && _b !== void 0 ? _b : defaultVal;\n}\n","// declare let HostEnv: {\n//     DebugLog: (msg: string) => void;\n//     AddResultFile: (name: string, content: string) => void;\n// }\nexport class HostEnv {\n    static addResultFile(name, content, bom, lineEndings) {\n        if (HostAddResultFile) {\n            HostAddResultFile(name, content, bom, lineEndings);\n            //HostEnv.debugLog(`Added file '${name}' with content: ${content}`);\n        }\n        else {\n            console.log(`Added file '${name}' with content: '${content}'`);\n        }\n    }\n    static addModelGroupSettings(group, settings) {\n        const json = JSON.stringify(settings);\n        if (HostAddModelGroupSettings) {\n            HostAddModelGroupSettings(group, json);\n        }\n        else {\n            console.log(`Added model group '${group}' with settings: ` + json);\n        }\n    }\n    static debugLog(msg) {\n        if (HostDebugLog) {\n            HostDebugLog(msg);\n        }\n        else {\n            console.log(msg);\n        }\n    }\n    static pathCombine(path1, path2) {\n        if (HostPathCombine) {\n            return HostPathCombine(path1, path2);\n        }\n        return path1 + '/' + path2;\n    }\n    static webHtmlEncode(input) {\n        if (HostWebHtmlEncode) {\n            return HostWebHtmlEncode(input);\n        }\n        return input;\n    }\n    static stopwatchStart() {\n        if (HostStopwatchStart) {\n            return HostStopwatchStart();\n        }\n        return Date.now();\n    }\n    static stopwatchEnd(start) {\n        if (HostStopwatchEnd) {\n            return HostStopwatchEnd(start);\n        }\n        return (Date.now() - start).toString();\n    }\n}\n","// noinspection JSUnusedGlobalSymbols\nimport { clearHelpersContext, debugHelpersTimeTaken, registerHelpers } from \"./helpers\";\nimport { TypescriptJson01Template } from \"./templates/typescriptJson\";\nimport { NetCoreResxCsharp01Template } from \"./templates/netCoreResxCsharp\";\nimport { NetFwResxCsharp01Template } from \"./templates/netFwResxCsharp\";\nimport { WinFormsResxCsharp01Template } from \"./templates/winFormsResxCsharp\";\nimport { WpfResxCsharp01Template } from \"./templates/wpfResxCsharp\";\nimport { hasItems, iterateObject, sortObjectByKey, sortObjectByValue } from \"./utils\";\nconst CodeGenUID = 'b40c8a1d-23b7-4f78-991b-c24898596dd2';\nexport class TemplateManager {\n    static intialize(handlebarFiles) {\n        TemplateManager.handlebarFiles = JSON.parse(handlebarFiles);\n        // @ts-ignore\n        String.prototype.isTrue = function () {\n            return this.toLowerCase() === \"true\";\n        };\n        registerHelpers();\n    }\n    static runTemplate(lhqModelJson, hostData) {\n        let lhqModel = JSON.parse(lhqModelJson);\n        if (lhqModel) {\n            //const startTime = HostEnv.stopwatchStart();\n            lhqModel = TemplateManager.sortByNameModel(lhqModel);\n            // const elapsedTime = HostEnv.stopwatchEnd(startTime);\n            // HostEnv.debugLog(`[sortByNameModel] takes ${elapsedTime}`);\n            const { template, templateId, settingsNode } = TemplateManager.loadTemplate(lhqModel);\n            let settings = template.loadSettings(settingsNode);\n            let host = {};\n            if (hostData) {\n                host = JSON.parse(hostData);\n            }\n            const rootModel = {\n                model: lhqModel,\n                settings: settings,\n                host: host,\n                extra: {}\n            };\n            template.generate(rootModel);\n            debugHelpersTimeTaken();\n            clearHelpersContext();\n        }\n        else {\n            throw new Error(`Unable to deserialize LHQ model !`);\n        }\n    }\n    static loadTemplate(model) {\n        var _a, _b, _c;\n        let template = undefined;\n        let templateId = '';\n        let node = (_b = (_a = model.metadatas) === null || _a === void 0 ? void 0 : _a.childs) === null || _b === void 0 ? void 0 : _b.find(x => { var _a; return x.name === 'metadata' && ((_a = x.attrs) === null || _a === void 0 ? void 0 : _a['descriptorUID']) === CodeGenUID; });\n        if (node) {\n            node = (_c = node.childs) === null || _c === void 0 ? void 0 : _c.find(x => { var _a; return x.name === 'content' && ((_a = x.attrs) === null || _a === void 0 ? void 0 : _a['templateId']) !== undefined; });\n            if (node) {\n                templateId = node === null || node === void 0 ? void 0 : node.attrs['templateId'];\n                node = node.childs.find(x => { var _a; return x.name === 'Settings' && ((_a = x.childs) === null || _a === void 0 ? void 0 : _a.length) > 0; });\n            }\n        }\n        if (node && templateId !== undefined && template !== '') {\n            const ctor = TemplateManager.generators[templateId];\n            template = (ctor && new ctor(TemplateManager.handlebarFiles)) || undefined;\n            return { template, templateId, settingsNode: node };\n        }\n        throw new Error(`Template '${templateId}' not found !`);\n    }\n    static sortByNameModel(lhqModel) {\n        function getFullParentPath(sep, element) {\n            let pathArray = [];\n            let currentElement = element.getParent();\n            pathArray.unshift(element.getName());\n            while (currentElement) {\n                if (currentElement === null || currentElement === void 0 ? void 0 : currentElement.isRoot()) {\n                    break;\n                }\n                pathArray.unshift(currentElement.getName());\n                currentElement = currentElement.getParent();\n            }\n            return pathArray.join(sep);\n        }\n        function recursiveCategories(parentCategory) {\n            if (parentCategory.categories) {\n                parentCategory.categories = sortObjectByKey(parentCategory.categories);\n                iterateObject(parentCategory.categories, (category, name, __, isLastCategory) => {\n                    category.getName = () => name;\n                    category.isRoot = () => false;\n                    category.isLast = () => isLastCategory;\n                    category.getParent = () => parentCategory;\n                    category.hasCategories = () => hasItems(parentCategory.categories);\n                    category.hasResources = () => hasItems(parentCategory.resources);\n                    category.getFullParentPath = (sep) => getFullParentPath(sep, category);\n                    recursiveCategories(category);\n                });\n            }\n            if (parentCategory.resources) {\n                parentCategory.resources = sortObjectByKey(parentCategory.resources);\n                iterateObject(parentCategory.resources, (resource, name, __, isLastResource) => {\n                    resource.getName = () => name;\n                    resource.isLast = () => isLastResource;\n                    resource.getParent = () => parentCategory;\n                    resource.hasParameters = () => hasItems(resource.parameters);\n                    resource.getFullParentPath = (sep) => getFullParentPath(sep, resource);\n                    if (resource.parameters) {\n                        resource.parameters = sortObjectByValue(resource.parameters, x => x.order);\n                        iterateObject(resource.parameters, (parameter, _, __, isLastParam) => {\n                            parameter.isLast = () => isLastParam;\n                            parameter.getParent = () => resource;\n                        });\n                    }\n                });\n            }\n        }\n        lhqModel.getName = () => lhqModel.model.name;\n        lhqModel.isRoot = () => true;\n        lhqModel.isLast = () => true;\n        lhqModel.getParent = () => undefined;\n        lhqModel.hasCategories = () => hasItems(lhqModel.categories);\n        lhqModel.hasResources = () => hasItems(lhqModel.resources);\n        lhqModel.getFullParentPath = () => '';\n        recursiveCategories(lhqModel);\n        return lhqModel;\n    }\n}\nTemplateManager.generators = {\n    [TypescriptJson01Template.Id]: TypescriptJson01Template,\n    [NetCoreResxCsharp01Template.Id]: NetCoreResxCsharp01Template,\n    [NetFwResxCsharp01Template.Id]: NetFwResxCsharp01Template,\n    [WinFormsResxCsharp01Template.Id]: WinFormsResxCsharp01Template,\n    [WpfResxCsharp01Template.Id]: WpfResxCsharp01Template\n};\n","import { copyObject, isNullOrEmpty, valueOrDefault } from \"../utils\";\nimport { HostEnv } from \"../hostEnv\";\nimport { clearHelpersContext, getKnownHelpers } from \"../helpers\";\nexport class CodeGeneratorTemplate {\n    constructor(handlebarFiles) {\n        this.handlebarFiles = handlebarFiles;\n    }\n    getHandlebarFile(templateName) {\n        const file = this.handlebarFiles[templateName];\n        if (file === undefined || file === '') {\n            throw new Error(`Handlebar file with name '${templateName}' not found !`);\n        }\n        return file;\n    }\n    prepareFilePath(fileName, outputSettings) {\n        const outputFolder = outputSettings.OutputFolder;\n        return isNullOrEmpty(outputFolder) ? fileName : HostEnv.pathCombine(outputFolder, fileName);\n    }\n    addResultFile(name, content, outputSettings) {\n        var _a, _b;\n        HostEnv.addResultFile(name, content, (_a = outputSettings.EncodingWithBOM) !== null && _a !== void 0 ? _a : false, (_b = outputSettings.LineEndings) !== null && _b !== void 0 ? _b : 'lf');\n    }\n    setDefaults(outputSettings) {\n        var _a;\n        outputSettings.EncodingWithBOM = valueOrDefault(outputSettings.EncodingWithBOM, false);\n        outputSettings.LineEndings = valueOrDefault(outputSettings.LineEndings, 'lf');\n        outputSettings.Enabled = (_a = outputSettings.Enabled) !== null && _a !== void 0 ? _a : true.toString();\n    }\n    addModelGroupSettings(group, settings, keysToSkip) {\n        let obj = settings;\n        if (!isNullOrEmpty(keysToSkip) && keysToSkip.length > 0) {\n            obj = copyObject(settings, keysToSkip);\n        }\n        HostEnv.addModelGroupSettings(group, obj);\n    }\n    compileAndRun(templateFileName, data) {\n        let compiled;\n        if (this.lastCompiledTemplate === undefined || this.lastCompiledTemplate.templateFileName.toLowerCase() !== templateFileName.toLowerCase()) {\n            const handlebarsTemplate = this.getHandlebarFile(templateFileName);\n            const options = { knownHelpers: getKnownHelpers() };\n            // @ts-ignore\n            compiled = Handlebars.compile(handlebarsTemplate, options);\n            this.lastCompiledTemplate = {\n                templateFileName: templateFileName,\n                compiled: compiled\n            };\n        }\n        else {\n            compiled = this.lastCompiledTemplate.compiled;\n        }\n        if (isNullOrEmpty(compiled)) {\n            throw new Error(`Template '${templateFileName}' was not found !`);\n        }\n        clearHelpersContext();\n        let result = compiled(data);\n        result = result.replace(/\\t¤$/gm, \"\");\n        return result;\n    }\n}\n","import { CodeGeneratorTemplate } from \"./codeGeneratorTemplate\";\nimport { HostEnv } from \"../hostEnv\";\nimport { isNullOrEmpty, valueOrDefault } from \"../utils\";\nimport { AppError } from \"../AppError\";\nexport class CSharpResXTemplateBase extends CodeGeneratorTemplate {\n    constructor(handlebarFiles) {\n        super(handlebarFiles);\n        this._defaultCompatibleTextEncoding = true;\n    }\n    checkHasNamespaceName(rootModel) {\n        const key = 'namespace';\n        if (isNullOrEmpty(rootModel.host[key])) {\n            throw new AppError(`Missing value for parameter '${key}'.\\n` +\n                `> provide valid path to *.csproj which uses required lhq model\\n` +\n                `> or provide value for parameter '${key}' in cmd data parameters`);\n        }\n    }\n    debugLog(msg) {\n        HostEnv.debugLog(msg);\n    }\n    generate(rootModel) {\n        //const modelVersion = rootModel.model.model.version;\n        // if (modelVersion < 2) {\n        //     throw new AppError(`Current LHQ file version (${modelVersion}) is not supported! (min version 2 is supported)`);\n        // }\n        var _a, _b;\n        //const defaultCompatibleTextEncoding = true; //modelVersion < 2;\n        const modelName = rootModel.model.model.name;\n        rootModel.extra = (_a = rootModel.extra) !== null && _a !== void 0 ? _a : {};\n        if (this._settings.CSharp.Enabled.isTrue()) {\n            this.checkHasNamespaceName(rootModel);\n            rootModel.extra['rootClassName'] = this.getRootCsharpClassName(rootModel);\n            const csfileContent = this.compileAndRun(this.csharpTemplateName, rootModel);\n            const csFileName = this.prepareFilePath(modelName + '.gen.cs', this._settings.CSharp);\n            this.addResultFile(csFileName, csfileContent, this._settings.CSharp);\n            this.addModelGroupSettings('CSharp', this._settings.CSharp, ['Enabled']);\n        }\n        if (this._settings.ResX.Enabled.isTrue()) {\n            //this._settings.ResX.CompatibleTextEncoding = valueOrDefault(this._settings.ResX.CompatibleTextEncoding, defaultCompatibleTextEncoding.toString());\n            rootModel.extra['useHostWebHtmlEncode'] = this._settings.ResX.CompatibleTextEncoding.isTrue();\n            this.addModelGroupSettings('ResX', this._settings.ResX, ['Enabled']);\n            (_b = rootModel.model.languages) === null || _b === void 0 ? void 0 : _b.forEach(lang => {\n                if (!isNullOrEmpty(lang)) {\n                    rootModel.extra['lang'] = lang;\n                    const resxfileContent = this.compileAndRun('SharedResx', rootModel);\n                    const resxfileName = this.prepareFilePath(`${modelName}.${lang}.resx`, this._settings.ResX);\n                    this.addResultFile(resxfileName, resxfileContent, this._settings.ResX);\n                }\n            });\n        }\n    }\n    loadSettings(node) {\n        var _a;\n        const result = {\n            CSharp: undefined,\n            ResX: undefined\n        };\n        (_a = node.childs) === null || _a === void 0 ? void 0 : _a.forEach(x => {\n            const attrs = x.attrs;\n            switch (x.name) {\n                case 'CSharp':\n                    result.CSharp = attrs;\n                    break;\n                case 'ResX':\n                    result.ResX = attrs;\n                    break;\n            }\n        });\n        if (result.CSharp === undefined) {\n            throw new Error('CSharp settings not found !');\n        }\n        if (result.ResX === undefined) {\n            throw new Error('ResX settings not found !');\n        }\n        // result.CSharp.Enabled = result.CSharp.Enabled ?? true.toString();\n        // result.ResX.Enabled = result.ResX.Enabled ?? true.toString();\n        this.setDefaults(result.CSharp);\n        this.setDefaults(result.ResX);\n        // @ts-ignore\n        result.ResX.CompatibleTextEncoding = valueOrDefault(result.ResX.CompatibleTextEncoding, this._defaultCompatibleTextEncoding.toString());\n        this._settings = result;\n        return result;\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class NetCoreResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'NetCoreResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return NetCoreResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Localizer';\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class NetFwResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        //return 'NetFwResxCsharp01';\n        return 'WpfResxCsharp01'; // NetFwResxCsharp01 is same as WpfResxCsharp01!\n    }\n    get csharpTemplateName() {\n        return NetFwResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Context';\n    }\n}\n","import { CodeGeneratorTemplate } from \"./codeGeneratorTemplate\";\nimport { isNullOrEmpty, sortBy, valueOrDefault } from \"../utils\";\nexport class TypescriptJson01Template extends CodeGeneratorTemplate {\n    generate(rootModel) {\n        var _a;\n        const model = rootModel.model.model;\n        const modelName = model.name;\n        if (this._settings.Typescript.Enabled.isTrue()) {\n            const dtsFileContent = this.compileAndRun(TypescriptJson01Template.Id, rootModel);\n            const dtsFileName = this.prepareFilePath(modelName + '.d.ts', this._settings.Typescript);\n            this.addResultFile(dtsFileName, dtsFileContent, this._settings.Typescript);\n            this.addModelGroupSettings('Typescript', this._settings.Typescript, ['Enabled']);\n        }\n        if (this._settings.Json.Enabled.isTrue()) {\n            //const metadataFileNameSuffix = valueOrDefault(this._settings.Json.MetadataFileNameSuffix, 'metadata');\n            const metadataFileNameSuffix = this._settings.Json.MetadataFileNameSuffix;\n            const metadataObj = {\n                default: model.primaryLanguage,\n                languages: sortBy(rootModel.model.languages, undefined, 'asc')\n            };\n            const metadataContent = JSON.stringify(metadataObj, null, '\\t') + '\\n';\n            const metadataFileName = this.prepareFilePath(`${modelName}-${metadataFileNameSuffix}.json`, this._settings.Json);\n            this.addResultFile(metadataFileName, metadataContent, this._settings.Json);\n            this.addModelGroupSettings('Json', this._settings.Json, ['Enabled']);\n            rootModel.extra = {};\n            const writeEmptyValues = this._settings.Json.WriteEmptyValues.isTrue();\n            const allFilesHasLangInName = this._settings.Json.CultureCodeInFileNameForPrimaryLanguage.isTrue();\n            (_a = rootModel.model.languages) === null || _a === void 0 ? void 0 : _a.forEach(lang => {\n                if (!isNullOrEmpty(lang)) {\n                    const isPrimary = model.primaryLanguage === lang;\n                    const langName = !isPrimary || allFilesHasLangInName ? `.${lang}` : '';\n                    rootModel.extra['lang'] = lang;\n                    rootModel.extra['writeEmptyValues'] = writeEmptyValues;\n                    const jsonFileContent = this.compileAndRun('JsonPerLanguage', rootModel);\n                    const jsonfileName = this.prepareFilePath(`${modelName}${langName}.json`, this._settings.Json);\n                    this.addResultFile(jsonfileName, jsonFileContent, this._settings.Json);\n                }\n            });\n        }\n    }\n    loadSettings(node) {\n        var _a;\n        const result = { Typescript: undefined, Json: undefined };\n        (_a = node.childs) === null || _a === void 0 ? void 0 : _a.forEach(x => {\n            const attrs = x.attrs;\n            switch (x.name) {\n                case 'Typescript':\n                    result.Typescript = attrs;\n                    break;\n                case 'Json':\n                    result.Json = attrs;\n                    break;\n            }\n        });\n        if (result.Typescript === undefined) {\n            throw new Error('Typescript settings not found !');\n        }\n        if (result.Json === undefined) {\n            throw new Error('Json settings not found !');\n        }\n        //result.Typescript.Enabled = result.Typescript.Enabled ?? true.toString();\n        this.setDefaults(result.Typescript);\n        //result.Json.Enabled = result.Json.Enabled ?? true.toString();\n        this.setDefaults(result.Json);\n        result.Json.MetadataFileNameSuffix = valueOrDefault(result.Json.MetadataFileNameSuffix, 'metadata');\n        this._settings = result;\n        return result;\n    }\n    static get Id() {\n        return 'TypescriptJson01';\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class WinFormsResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'WinFormsResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return WinFormsResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Context';\n    }\n    loadSettings(node) {\n        var _a, _b, _c;\n        const settings = super.loadSettings(node);\n        settings.CSharp.ParamsMethodsSuffix = (_a = settings.CSharp.ParamsMethodsSuffix) !== null && _a !== void 0 ? _a : 'WithParams';\n        settings.CSharp.GenerateParamsMethods = (_b = settings.CSharp.GenerateParamsMethods) !== null && _b !== void 0 ? _b : true.toString();\n        settings.CSharp.MissingTranslationFallbackToPrimary = (_c = settings.CSharp.MissingTranslationFallbackToPrimary) !== null && _c !== void 0 ? _c : false.toString();\n        return settings;\n    }\n    generate(rootModel) {\n        var _a, _b;\n        if (this._settings.CSharp.Enabled.isTrue()) {\n            rootModel.extra = (_a = rootModel.extra) !== null && _a !== void 0 ? _a : {};\n            const generateParamsMethods = this._settings.CSharp.GenerateParamsMethods.isTrue();\n            rootModel.extra['generateParamsMethods'] = generateParamsMethods;\n            rootModel.extra['paramsMethodsSuffix'] = (generateParamsMethods ? ((_b = this._settings.CSharp.ParamsMethodsSuffix) !== null && _b !== void 0 ? _b : 'WithParams') : '');\n            const bindableFileName = this.prepareFilePath('BindableObject.gen.cs', this._settings.CSharp);\n            const bindableContent = this.compileAndRun('WinFormsBindableObject', rootModel);\n            this.addResultFile(bindableFileName, bindableContent, this._settings.CSharp);\n        }\n        super.generate(rootModel);\n    }\n}\n","import { CSharpResXTemplateBase } from \"./csharpResXTemplateBase\";\nexport class WpfResxCsharp01Template extends CSharpResXTemplateBase {\n    static get Id() {\n        return 'WpfResxCsharp01';\n    }\n    get csharpTemplateName() {\n        return WpfResxCsharp01Template.Id;\n    }\n    getRootCsharpClassName(rootModel) {\n        return rootModel.model.model.name + 'Context';\n    }\n}\n","//const he = require('he');\nexport function getNestedPropertyValue(obj, path) {\n    return path.split('.').reduce((acc, part) => {\n        if (acc === undefined)\n            return undefined;\n        // Check if the part includes an array index like \"c[1]\"\n        const match = part.match(/^(\\w+)\\[(\\d+)]$/);\n        if (match) {\n            const [, property, index] = match;\n            // @ts-ignore\n            return Array.isArray(acc[property]) ? acc[property][index] : undefined;\n        }\n        // @ts-ignore\n        return acc[part];\n    }, obj);\n}\n/**\n * Checks if a `value` is null, undefined or empty string.\n *\n * @typeParam T - The type of the value.\n * @param value - The value to check.\n *\n * @returns `true` if the value is null, undefined or empty string, `false` otherwise.\n */\nexport function isNullOrEmpty(value) {\n    return value === null || value === undefined || value === '';\n}\nexport function sortObjectByKey(obj, sortOrder = 'asc') {\n    return Object.fromEntries(Object.entries(obj).sort(([a], [b]) => sortOrder === 'asc' ? a.localeCompare(b, 'en') : b.localeCompare(a, 'en')));\n}\nexport function sortObjectByValue(obj, predicate, sortOrder = 'asc') {\n    return Object.fromEntries(Object.entries(obj).sort(([, a], [, b]) => {\n        const aValue = predicate(a);\n        const bValue = predicate(b);\n        if (aValue < bValue) {\n            return sortOrder === 'asc' ? -1 : 1;\n        }\n        if (aValue > bValue) {\n            return sortOrder === 'asc' ? 1 : -1;\n        }\n        return 0;\n    }));\n}\nexport function sortBy(source, propName, sortOrder = 'asc') {\n    return source.concat([]).sort((a, b) => {\n        // @ts-ignore\n        const v1 = propName === undefined ? a : a[propName];\n        // @ts-ignore\n        const v2 = propName === undefined ? b : b[propName];\n        const res = v1 > v2 ? 1 : ((v2 > v1) ? -1 : 0);\n        return sortOrder === 'asc' ? res : res * -1;\n    });\n}\nexport function iterateObject(obj, callback) {\n    const entries = Object.entries(obj);\n    if (entries.length > 0) {\n        const lastIndex = entries.length - 1;\n        let index = -1;\n        for (const [key, value] of entries) {\n            index++;\n            const isLast = index == lastIndex;\n            callback(value, key, index, isLast);\n        }\n    }\n}\nconst encodingCharMaps = {\n    html: {\n        '>': '&gt;',\n        '<': '&lt;',\n        '\"': '&quot;',\n        \"'\": '&apos;',\n        '&': '&amp;'\n    },\n    xml: {\n        '>': '&gt;',\n        '<': '&lt;',\n        '&': '&amp;'\n    },\n    xml_quotes: {\n        '>': '&gt;',\n        '<': '&lt;',\n        '\"': '&quot;',\n        \"'\": '&apos;',\n        '&': '&amp;'\n    },\n    json: {\n        '\\\\': '\\\\\\\\',\n        '\"': '\\\\\"',\n        '\\b': '\\\\b',\n        '\\f': '\\\\f',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t'\n    }\n};\nexport function textEncode(str, encoder) {\n    var _a;\n    if (isNullOrEmpty(str)) {\n        return str;\n    }\n    const encodedChars = [];\n    for (let i = 0; i < str.length; i++) {\n        const ch = str.charAt(i);\n        let map = undefined;\n        if (encoder.mode === 'html') {\n            map = encodingCharMaps.html;\n        }\n        else if (encoder.mode === 'xml') {\n            map = ((_a = encoder.quotes) !== null && _a !== void 0 ? _a : true) ? encodingCharMaps.xml_quotes : encodingCharMaps.xml;\n        }\n        else {\n            map = encodingCharMaps.json;\n        }\n        if (map.hasOwnProperty(ch)) {\n            encodedChars.push(map[ch]);\n        }\n        else {\n            encodedChars.push(ch);\n        }\n    }\n    return encodedChars.join('');\n}\nexport function valueOrDefault(value, defaultValue) {\n    let result = isNullOrEmpty(value)\n        ? defaultValue\n        : value;\n    if (typeof defaultValue === 'boolean') {\n        result = valueAsBool(value);\n    }\n    return result;\n}\nexport function valueAsBool(value) {\n    switch (typeof value) {\n        case 'boolean':\n            return value;\n        case 'number':\n            return value > 0;\n        case 'string':\n            return value.toLowerCase() === 'true';\n        default:\n            return false;\n    }\n}\nexport function toBoolean(value) {\n    return value.toLowerCase() === 'true';\n}\nexport function hasItems(obj) {\n    const result = objCount(obj) > 0;\n    //HostEnv.debugLog(`[hasItems] returns '${result}' for obj: ${JSON.stringify(obj)}`);\n    return result;\n}\nexport function objCount(obj) {\n    if (isNullOrEmpty(obj)) {\n        return 0;\n    }\n    if (Array.isArray(obj)) {\n        return obj.length;\n    }\n    if (typeof obj === 'object') {\n        return Object.keys(obj).length;\n    }\n    return 0;\n}\nexport function copyObject(obj, keysToSkip) {\n    return Object.fromEntries(Object.entries(obj).filter(([key]) => !keysToSkip.includes(key)));\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//export * from './types';\n// export * from './utils';\nexport * from './templateManager';\n"],"names":[],"sourceRoot":""}