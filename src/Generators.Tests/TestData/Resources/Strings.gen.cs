//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SynotW.Jackpot.Localization
{
	using System;
	using System.Resources;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Linq;
	using System.Globalization;
	using Microsoft.Extensions.Localization;

	public class StringsLocalizer : IStringLocalizer
	{
		private readonly CultureInfo _culture;
		private CultureInfo _fallbackCulture;
	
		private static readonly Lazy<ResourceManager> _resourceManager = new Lazy<ResourceManager>(CreateResourceManager);

		public StringsLocalizer()
		{}

		public StringsLocalizer(CultureInfo culture)
		{
			_culture = culture;
		}

		public const string PrimaryCulture = "en";

		public static ResourceManager ResourceManager => _resourceManager.Value;

		private static ResourceManager CreateResourceManager()
		{
			return new ResourceManager("SynotW.Jackpot.Localization.Resources.Strings",
					typeof(SynotW.Jackpot.Localization.Strings).GetTypeInfo().Assembly);
		}

		public CultureInfo FallbackCulture
		{
			get
			{
				if (_fallbackCulture == null)
				{
					_fallbackCulture = new CultureInfo(PrimaryCulture);
				}
				return _fallbackCulture;
			}
			set
			{
				if ((value == null) || !Strings.AvailableCultures.Contains(value.Name))
				{
					throw new InvalidOperationException($"Unable to set fallback culture to '{value.Name}' which is not defined in available cultures!");
				}

				_fallbackCulture = value;
			}
		}
	

		LocalizedString IStringLocalizer.this[string name]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var value = GetStringSafely(name, _culture);
				return new LocalizedString(name, value ?? name, value == null);
			}
		}

		LocalizedString IStringLocalizer.this[string name, params object[] arguments]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var format = GetStringSafely(name, _culture);
				var value = string.Format(format ?? name, arguments);
				return new LocalizedString(name, value, format == null);
			}
		}

		public IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures)
		{
			throw new NotImplementedException();
		}

		public IStringLocalizer WithCulture(CultureInfo culture) => new StringsLocalizer(culture);

		private string GetStringSafely(string name, CultureInfo culture)
		{
			string result = null;
			try
			{
				result = culture == null ? ResourceManager.GetString(name) : ResourceManager.GetString(name, culture);
			}
			catch (MissingManifestResourceException)
			{} // Resource does not exist

			if (result == null)
			{
				if (FallbackCulture != null)
				{
					try
					{
						result = ResourceManager.GetString(name, FallbackCulture);
					}
					catch (MissingManifestResourceException)
					{} // Resource does not exist

					if (result == null)
					{
						result = string.Format("???{0}.{1}???", name, FallbackCulture == null ? string.Empty : FallbackCulture.Name);
					}
				}
				else
				{
					result = string.Format("???{0}.{1}???", name, culture == null ? string.Empty : culture.Name);
				}
			}

			return result;
		}
	}

	public static class StringsKeys
	{
		public static class JackpotTemplates
		{
			/// <summary>
			/// Gets localized string similar to: Description
			/// </summary>
			public const string Description = "JackpotTemplatesDescription";
			/// <summary>
			/// Gets localized string similar to: Id
			/// </summary>
			public const string Id = "JackpotTemplatesId";
			/// <summary>
			/// Gets localized string similar to: Name
			/// </summary>
			public const string Name = "JackpotTemplatesName";
		}
	}

	public partial class Strings
	{
		private static IStringLocalizer _localizer;

		public Strings(IStringLocalizer localizer)
		{
			_localizer = localizer;
		}


		public static string[] AvailableCultures => new string[] { "en","sk" };

		public static partial class JackpotTemplates
		{
			/// <summary>
			/// Gets localized string similar to: Description
			/// </summary>
			public static string Description => _localizer[StringsKeys.JackpotTemplates.Description];
	
			/// <summary>
			/// Gets localized string similar to: Id
			/// </summary>
			public static string Id => _localizer[StringsKeys.JackpotTemplates.Id];
	
			/// <summary>
			/// Gets localized string similar to: Name
			/// </summary>
			public static string Name => _localizer[StringsKeys.JackpotTemplates.Name];
	
		}
	}
}
