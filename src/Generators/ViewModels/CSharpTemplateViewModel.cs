using System.Linq;
using System.Text;
using LHQ.Data;
using LHQ.Data.Extensions;
using LHQ.Data.Interfaces;
using LHQ.Data.Templating.Settings;
using LHQ.Data.Templating.Settings.NetCore;

namespace LHQ.Generators.NetCore
{
    public class CSharpTemplateViewModel : TemplateViewModel
    {
	    //private readonly TemplateRenderer _renderer = new TemplateRenderer();
	    
        public CSharpTemplateViewModel(ModelContext modelContext, GeneratorSettingsBase settings)
            : base(modelContext, settings)
        {
            Settings = (CSharpGeneratorSettings)settings;

            FlattenAllResources();

            NamespaceName = Settings.RootNamespace;
            ResourcesNamespace = NamespaceName;
            if (!string.IsNullOrEmpty(settings.OutputFolder)) {
                ResourcesNamespace += "." + settings.OutputFolder.Replace("\\", ".");
            }
            
            ModelClassNameWithNamespace = NamespaceName + "." + ModelClassName;
        }

        private string NamespaceName { get; }

        private string ModelClassNameWithNamespace { get; }

        private string ResourcesNamespace { get; }

        protected new CSharpGeneratorSettings Settings { get; }
        
        public override string Render()
        {
            return 
$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace {{NamespaceName}}
{
	using System;
	using System.Resources;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Linq;
	using System.Globalization;
	using Microsoft.Extensions.Localization;

	public class {{StringLocalizerClassName}} : IStringLocalizer
    {
        private readonly CultureInfo _culture;
        {{(Settings.MissingTranslationFallbackToPrimary ? "private CultureInfo _fallbackCulture;" : "")}}

        private static readonly Lazy<ResourceManager> _resourceManager = new Lazy<ResourceManager>(CreateResourceManager);
        
        public {{StringLocalizerClassName}}()
        {}

        public {{StringLocalizerClassName}}(CultureInfo culture)
        {
            _culture = culture;
        }

        public const string PrimaryCulture = "{{PrimaryLanguage.Name}}";
        
        {{RenderResourceManagerProperty}}
        
        private static ResourceManager CreateResourceManager()
        {
			return new ResourceManager("{{ResourcesNamespace}}.{{ModelClassName}}",
				typeof({{ModelClassNameWithNamespace}}).GetTypeInfo().Assembly);
        }
        
        {{RenderFallbackCultureProperty.ToStringIndent(2)}}
        
        LocalizedString IStringLocalizer.this[string name]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var value = GetStringSafely(name, _culture);
				return new LocalizedString(name, value ?? name, value == null);
			}
		}

		LocalizedString IStringLocalizer.this[string name, params object[] arguments]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var format = GetStringSafely(name, _culture);
				var value = string.Format(format ?? name, arguments);
				return new LocalizedString(name, value, format == null);
			}
		}

		public IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures)
		{
			throw new NotImplementedException();
		}
        
        {{RenderWithCultureMethod()}}
        
        private string GetStringSafely(string name, CultureInfo culture)
		{
			string result = null;
			try
			{
				result = culture == null ? ResourceManager.GetString(name) : ResourceManager.GetString(name, culture);
			}
			catch (MissingManifestResourceException)
			{} // Resource does not exist

			if (result == null)
            {
                {{RenderGetStringSafelyMethod()}}
            }
            
            return result;
        }
    }
    
    public static class {{KeysClassName}}
	{
        {{WriteCategoriesKeysClass(2, ModelRoot.Categories, RootResources)}}
    }
    
    public partial class {{ModelClassName}}
	{
		private static IStringLocalizer _localizer;

		public {{ModelClassName}}(IStringLocalizer localizer)
		{
			_localizer = localizer;
		}
		
		{{RenderAvailableCulturesProperty()}}
		
		{{WriteCategoriesAndResourcesClass(2, ModelRoot, RootResources)}}
	}
}
""";
        }

        private string RenderResourceManagerProperty =>
	        RenderCSharp_Property("", "public static ResourceManager", "ResourceManager", "_resourceManager.Value");
        
        private string RenderFallbackCultureProperty => Settings.MissingTranslationFallbackToPrimary
            ? $$"""
              public CultureInfo FallbackCulture
              {
              	get
              	{
              		if (_fallbackCulture == null)
              		{
              			_fallbackCulture = new CultureInfo(PrimaryCulture);
              		}
              		return _fallbackCulture;
              	}
              	set
              	{
              		if ((value == null) || !{{ModelClassName}}.AvailableCultures.Contains(value.Name))
              		{
              			throw new InvalidOperationException($"Unable to set fallback culture to '{value.Name}' which is not defined in available cultures!");
              		}
              
              		_fallbackCulture = value;
              	}
              }
              """
            : string.Empty;

        private string RenderAvailableCulturesProperty() =>
	        RenderCSharp_Property("", "public static string[]", "AvailableCultures",
		        $$"""new string[] { {{AvailableCultures}} }""");
        
        private string RenderWithCultureMethod() =>
	        RenderCSharp_Property("", "public IStringLocalizer", "WithCulture(CultureInfo culture)",
		        $$"""new {{StringLocalizerClassName}}(culture)""");

        private string RenderGetStringSafelyMethod() => Settings.MissingTranslationFallbackToPrimary
	        ? """
	          if (FallbackCulture != null)
	          {
	          	try
	          	{
	          		result = ResourceManager.GetString(name, FallbackCulture);
	          	}
	          	catch (MissingManifestResourceException)
	          	{} // Resource does not exist
	          
	          	if (result == null)
	          	{
	          		result = string.Format("???{0}.{1}???", name, FallbackCulture == null ? string.Empty : FallbackCulture.Name);
	          	}
	          }
	          else
	          {
	          	result = string.Format("???{0}.{1}???", name, culture == null ? string.Empty : culture.Name);
	          }
	          """
	        : """
	          result = string.Format("???{0}.{1}???", name, culture == null ? string.Empty : culture.Name);
	          """;
        
        private string WriteCategoriesKeysClass(int indentLevel, CategoryElementList categories, ResourceElementList parentResources = null)
        {
	        var render = new StringBuilder();
	        var orderedCategories = categories.OrderByName();
	        var last = orderedCategories.LastOrDefault();
	        
	        foreach (var category in orderedCategories)
	        {
		        render.Append(
$$"""
public static class {{category.Name}}
{
	{{(category.Categories.Count == 0 ? "" : WriteCategoriesKeysClass(0, category.Categories))}}
	
	{{WriteResourcesToKeysClass(0, category.Resources)}}
}
""");
		        if (category != last)
		        {
			        render.AppendLine();
		        }
	        }

	        if (parentResources is { Count: > 0 })
	        {
		        render.Append(WriteResourcesToKeysClass(0, parentResources));
	        }

	        return render.ToStringIndent(indentLevel);
        }

        private string WriteResourcesToKeysClass(int indentLevel, ResourceElementList resources)
        {
	        var render = new StringBuilder();
	        foreach(var resource in resources.OrderByName())
	        {
		        var propertyComment = GetCommentForResourceProperty(resource);
		        render.Append(
$$"""
/// <summary>
/// Gets localized string similar to: {{propertyComment}}
/// </summary>
public const string {{resource.Name}} = "{{GetFullResourceKey(resource, false)}}";
""");
	        }
	        return render.ToStringIndent(indentLevel);
        }
        
        string GetFullResourceKey(ResourceElement resource, bool withSeparator) 
	        => AllResources[resource].GetResourceKey(withSeparator);
        
        private string WriteCategoriesAndResourcesClass(int indentLevel, ICategoryLikeElement parentCategoryLike, ResourceElementList parentResources = null)
        {
	        StringBuilder render = new StringBuilder();
	        
	        var orderedCategories = parentCategoryLike.Categories.OrderByName();
	        var last = orderedCategories.LastOrDefault();

	        foreach (var category in orderedCategories)
	        {
		        render.Append(
$$"""
public static partial class {{category.Name}}
{
	{{(category.Categories.Count == 0 ? "" : WriteCategoriesAndResourcesClass(0, category))}}
	
	{{WriteResourcesToClass(0, category.Resources, category)}}
}
""");
		        if (category != last)
		        {
			        render.AppendLine();
		        }
	        }
	        
	        if (parentResources is { Count: > 0 })
	        {
		        render.Append(WriteResourcesToClass(0, parentResources, parentCategoryLike as CategoryElement));
	        }

	        return render.ToStringIndent(indentLevel);
        }

        private string WriteResourcesToClass(int indentLevel, ResourceElementList resources, CategoryElement parentCategory)
        {
	        var render = new StringBuilder();

	        foreach(var resource in resources.OrderByName())
	        {
		        render.Append(WriteCSharpResourceProxyProperty(0, resource, parentCategory));
	        }
	        
	        return render.ToStringIndent(indentLevel);
        }

        private string WriteCSharpResourceProxyProperty(int indentLevel, ResourceElement resource,
	        CategoryElement category)
        {
	        var render = new StringBuilder();
	        
	        if (!string.IsNullOrEmpty(resource.Name))
	        {
		        var localizerIndexerKey = GetLocalizerIndexerKey(resource, category);
		        var propertyComment = GetCommentForResourceProperty(resource);

		        var xmlDoc = $"""Gets localized string similar to: {propertyComment}""";
		        if (resource.Parameters.Count == 0)
		        {
			        render.Append(RenderCSharp_Property(
				        xmlDoc,
				        "public static string", 
				        resource.Name, 
				        $"""_localizer[{localizerIndexerKey}]"""));
		        }
		        else
		        {
			        var paramNames = resource.Parameters.Count == 0 ? string.Empty : ", " + string.Join(",", resource.Parameters.Select(x => x.Name));
			        var paramNamesWithTypes = string.Join(",", resource.Parameters.Select(x => "object " + x.Name));

			        render.Append(RenderCSharp_Property(
				        xmlDoc,
				        "public static string",
				        $$"""{{resource.Name}}({{paramNamesWithTypes}})""",
				        $$"""_localizer[{{localizerIndexerKey}}{{paramNames}}]"""
			        ));
		        }
	        }
	        
	        return render.ToStringIndent(indentLevel);
        }

        private string RenderCSharp_Property(string comment, string propertyHeader, string propertyName, string propertyValue,
	        int indentLevel = 0)
        {
	        var xmlComment = string.IsNullOrEmpty(comment)
		        ? string.Empty
		        : $"""
		           /// <summary>
		           /// {comment} 
		           /// </summary>
		           """;

	        return (Settings.UseExpressionBodySyntax
		        ? $$"""
		            {{xmlComment}}
		            {{propertyHeader}} {{propertyName}} => {{propertyValue}};
		            """
		        : $$"""
		            {{xmlComment}}
		            {{propertyHeader}} {{propertyName}}
		            {
		                get
		                {
		                
		                    return {{propertyValue}};
		                }
		            }
		            """).Trim(); //.ToStringIndent(indentLevel);
        }

        string GetLocalizerIndexerKey(ResourceElement resource, CategoryElement category) 
        {
	        return KeysClassName + "." + GetFullResourceKey(resource, true);
        }
    }
}