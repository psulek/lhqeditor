<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="LHQ.Utils" #>
<#@ import namespace="LHQ.Data" #>
<#@ import namespace="LHQ.Data.Interfaces" #>
<#@ import namespace="LHQ.Data.Extensions" #>
<#@ import namespace="LHQ.Data.Templating.Settings" #>
<#@ import namespace="LHQ.Data.Templating.Settings.NetCore" #>

<#+
class CSharpGenerator: GeneratorBase<CSharpGeneratorSettings> {
	public class ResourceInfo {
		public ResourceElement Resource { get; set; }
		public string ParentsPath { get; set; }
		public string ParentsPathWithSep { get; set; }

		public ResourceInfo(ResourceElement resource) 
		{
			Resource = resource;
		}

		public string GetResourceKey(bool withSeparator)
		{
			if (withSeparator)
			{
				return string.IsNullOrEmpty(ParentsPathWithSep) ? Resource.Name : ParentsPathWithSep + "." + Resource.Name;
			}
			
			return string.IsNullOrEmpty(ParentsPath) ? Resource.Name : ParentsPath + Resource.Name;
		}
	}

	private Dictionary<ResourceElement, ResourceInfo> AllResources { get; set; }

	private string keysClassName;
	private string stringLocalizerClassName;
	private ResourceElementList _rootResources;

	public CSharpGenerator(object textTemplatingHost, ModelContext modelContext,
			CSharpGeneratorSettings settings)
			: this(textTemplatingHost, modelContext, settings, null)
	{}

	public CSharpGenerator(object textTemplatingHost, ModelContext modelContext,
			CSharpGeneratorSettings settings, FileManager manager)
		: base(textTemplatingHost, modelContext, settings, manager) 
	{}

	protected override string GeneratorName
	{
		get { return "C# .NET Core Generator"; }
	}

	public override void DoGenerate() {
		try
		{
			FlattenAllResources();

			WriteCSharpModelClass();
		}
		finally
		{
			this.Manager.Flush();
		}
	}

	void FlattenAllResources()
	{
		_rootResources = new ResourceElementList(ModelRoot.Resources.Where(x => x.ParentKey == null).ToList());
		AllResources = _rootResources.ToDictionary(x => x, x => new ResourceInfo(x));
		IterateCategories(ModelRoot.Categories, string.Empty, string.Empty, _rootResources);
	}

	void IterateCategories(CategoryElementList categories, string parentsPath, string parentsPathSep, ResourceElementList parentResources)
	{
		foreach(var category in categories.OrderByName())
		{
			var newparentsPath = parentsPath + category.Name;
			var newparentsPathSep = string.IsNullOrEmpty(parentsPathSep) ? category.Name : parentsPathSep + "." + category.Name;

			if (parentResources.ContainsByName(category.Name, true)) 
			{
				throw new ApplicationException(string.Format("Could not generate C# code! Resource and category name '{0}' could not be same for parent '{1}'!", category.Name, parentsPathSep ?? ""));
			}

			if (category.Categories.Count > 0)
			{
				IterateCategories(category.Categories, newparentsPath, newparentsPathSep, category.Resources);
			}

			foreach(var resource in category.Resources.OrderByName())
			{
				var resourceInfo = new ResourceInfo(resource);
				resourceInfo.ParentsPath = newparentsPath;
				resourceInfo.ParentsPathWithSep = newparentsPathSep;
				AllResources.Add(resource, resourceInfo);
			}
		}
	}



	string GetFullResourceKey(ResourceElement resource, bool withSeparator)
	{
		return AllResources[resource].GetResourceKey(withSeparator);
	}


	void WriteCSharpModelClass()
	{
		string namespaceName = this.Manager.ResolveNamespace();
		string modelName = this.ModelRoot.Name;
		string modelClassName = modelName;
		string resourcesNamespace = namespaceName;
		if (!string.IsNullOrEmpty(Settings.OutputFolder)) {
			resourcesNamespace += "." + Settings.OutputFolder.Replace("\\", ".");
		}
		string modelClassNameWithNamespace = namespaceName + "." + modelClassName;

		var availableCultures = string.Join(",", ModelRoot.Languages.Select(x => "\"" + x.Name + "\""));

		this.keysClassName = modelName + "Keys";
		this.stringLocalizerClassName = modelName + "Localizer";
		this.StartNewFile(modelName + ".gen.cs", this.Settings);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= namespaceName #>
{
	using System;
	using System.Resources;
	using System.Reflection;
	using System.Collections.Generic;
	using System.Linq;
	using System.Globalization;
	using Microsoft.Extensions.Localization;

	public class <#= stringLocalizerClassName #> : IStringLocalizer
	{
		private readonly CultureInfo _culture;
<#+
		if (Settings.MissingTranslationFallbackToPrimary)
		{
#>
		private CultureInfo _fallbackCulture;
<#+
		}
#>	
		private static readonly Lazy<ResourceManager> _resourceManager = new Lazy<ResourceManager>(CreateResourceManager);

		public <#= stringLocalizerClassName #>()
		{}

		public <#= stringLocalizerClassName #>(CultureInfo culture)
		{
			_culture = culture;
		}

		public const string PrimaryCulture = "<#= PrimaryLanguage.Name #>";

<#+
		if (Settings.UseExpressionBodySyntax)
		{
#>
		public static ResourceManager ResourceManager => _resourceManager.Value;
<#+
		}
		else
		{
#>
		public static ResourceManager ResourceManager
		{
			get
			{
				return _resourceManager.Value;
			}
		}
<#+
		}
#>

		private static ResourceManager CreateResourceManager()
		{
			return new ResourceManager("<#= resourcesNamespace #>.<#= modelClassName #>",
					typeof(<#= modelClassNameWithNamespace #>).GetTypeInfo().Assembly);
		}

<#+
		if (Settings.MissingTranslationFallbackToPrimary)
		{
#>
		public CultureInfo FallbackCulture
		{
			get
			{
				if (_fallbackCulture == null)
				{
					_fallbackCulture = new CultureInfo(PrimaryCulture);
				}
				return _fallbackCulture;
			}
			set
			{
				if ((value == null) || !<#= modelClassName #>.AvailableCultures.Contains(value.Name))
				{
					throw new InvalidOperationException($"Unable to set fallback culture to '{value.Name}' which is not defined in available cultures!");
				}

				_fallbackCulture = value;
			}
		}
<#+
		}
#>	

		LocalizedString IStringLocalizer.this[string name]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var value = GetStringSafely(name, _culture);
				return new LocalizedString(name, value ?? name, value == null);
			}
		}

		LocalizedString IStringLocalizer.this[string name, params object[] arguments]
		{
			get
			{
				if (name == null)
				{
					throw new ArgumentNullException(nameof(name));
				}

				var format = GetStringSafely(name, _culture);
				var value = string.Format(format ?? name, arguments);
				return new LocalizedString(name, value, format == null);
			}
		}

		public IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures)
		{
			throw new NotImplementedException();
		}

<#+
		if (Settings.UseExpressionBodySyntax)
		{
#>
		public IStringLocalizer WithCulture(CultureInfo culture) => new <#= stringLocalizerClassName #>(culture);
<#+
		}
		else
		{
#>
		public IStringLocalizer WithCulture(CultureInfo culture)
		{
			return new <#= stringLocalizerClassName #>(culture);
		}
<#+
		}
#>

		private string GetStringSafely(string name, CultureInfo culture)
		{
			string result = null;
			try
			{
				result = culture == null ? ResourceManager.GetString(name) : ResourceManager.GetString(name, culture);
			}
			catch (MissingManifestResourceException)
			{} // Resource does not exist

			if (result == null)
			{
<#+
				if (Settings.MissingTranslationFallbackToPrimary)
				{
#>
				if (FallbackCulture != null)
				{
					try
					{
						result = ResourceManager.GetString(name, FallbackCulture);
					}
					catch (MissingManifestResourceException)
					{} // Resource does not exist

					if (result == null)
					{
						result = string.Format("???{0}.{1}???", name, FallbackCulture == null ? string.Empty : FallbackCulture.Name);
					}
				}
				else
				{
					result = string.Format("???{0}.{1}???", name, culture == null ? string.Empty : culture.Name);
				}
<#+
				}
				else
				{
#>
				result = string.Format("???{0}.{1}???", name, culture == null ? string.Empty : culture.Name);
<#+
				}
#>
			}

			return result;
		}
	}

	public static class <#= keysClassName #>
	{
<#+
		WriteCategoriesKeysClass(this.ModelRoot.Categories, this._rootResources);
#>
	}

	public partial class <#= modelClassName #>
	{
		private static IStringLocalizer _localizer;

		public <#= modelClassName #>(IStringLocalizer localizer)
		{
			_localizer = localizer;
		}

<#+
		if (Settings.UseExpressionBodySyntax)
		{
#>

		public static string[] AvailableCultures => new string[] { <#= availableCultures #> };

<#+
		}
		else
		{
#>

		public static string[] AvailableCultures
		{
			get
			{
				return new string[] { <#= availableCultures #> };
			}
		}

<#+
		}

		WriteCategoriesAndResourcesClass(this.ModelRoot, this._rootResources);
#>
	}
}
<#+
		this.Manager.EndNewFile();
	}

	void WriteCategoriesKeysClass(CategoryElementList categories, ResourceElementList parentResources = null)
	{
		var orderedCategories = categories.OrderByName();
		var last = orderedCategories.LastOrDefault();

		foreach(var category in orderedCategories)
		{
#>
		public static class <#= category.Name #>
		{
<#+
			if (category.Categories.Count > 0)
			{
#>
<#+
				PushIndent();
				WriteCategoriesKeysClass(category.Categories);
				PopIndent();
			}
#>
<#+
			PushIndent();
			WriteResourcesToKeysClass(category.Resources);
			PopIndent();
#>
		}
<#+
			if (category != last)
			{ // add empty line
#>
		
<#+
			}
		}

		if (parentResources != null && parentResources.Count > 0)
		{
#>
		
<#+
			WriteResourcesToKeysClass(parentResources);
#>
<#+
		}
	}

	void WriteResourcesToKeysClass(ResourceElementList resources)
	{
		foreach(var resource in resources.OrderByName())
		{
			var propertyComment = GetCommentForResourceProperty(resource);
#>
		/// <summary>
		/// Gets localized string similar to: <#= propertyComment #>
		/// </summary>
		public const string <#= resource.Name #> = "<#= GetFullResourceKey(resource, false) #>";
<#+
		}
	}

	void WriteCategoriesAndResourcesClass(ICategoryLikeElement parentCategoryLike, ResourceElementList parentResources = null)
	{
		var orderedCategories = parentCategoryLike.Categories.OrderByName();
		var last = orderedCategories.LastOrDefault();

		foreach(var category in orderedCategories)
		{
#>
		public static partial class <#= category.Name #>
		{
<#+
			if (category.Categories.Count > 0)
			{
#>
<#+
				PushIndent();
				WriteCategoriesAndResourcesClass(category);
				PopIndent();
			}

			PushIndent();
			WriteResourcesToClass(category.Resources, category);
			PopIndent();
#>
		}
<#+
			if (category != last)
			{ // add empty line
#>
		
<#+
			}
		}

		if (parentResources != null && parentResources.Count > 0)
		{
#>
		
<#+
			WriteResourcesToClass(parentResources, parentCategoryLike as CategoryElement);
		}
	}

	void WriteResourcesToClass(ResourceElementList resources, CategoryElement parentCategory)
	{
		foreach(var resource in resources.OrderByName())
		{
			WriteCSharpResourceProxyProperty(resource, parentCategory);
		}
	}

	string GetLocalizerIndexerKey(ResourceElement resource, CategoryElement category) 
	{
		return keysClassName + "." + GetFullResourceKey(resource, true);
	}

	/*string GetCommentForResourceProperty(ResourceElement resource)
	{
		var primaryResourceValue = resource.FindValueByLanguage(PrimaryLanguage.Name);
		string propertyComment = primaryResourceValue != null && !string.IsNullOrEmpty(primaryResourceValue.Value) 
			? primaryResourceValue.Value
			: resource.Description;

		if (propertyComment == null)
		{
			propertyComment = string.Empty;
		}

		bool trimmed = false;
		var idxNewLine = propertyComment.IndexOf(Environment.NewLine);

		if (idxNewLine > -1)
		{
			propertyComment = propertyComment.Substring(0, idxNewLine);
			trimmed = true;
		}

		if (propertyComment.Length > 80)
		{
			propertyComment = propertyComment.Substring(0, 80);
			trimmed = true;
		}

		if (trimmed)
		{
			propertyComment += "...";
		}

		return propertyComment;
	}*/

	void WriteCSharpResourceProxyProperty(ResourceElement resource, CategoryElement category) 
	{
		if (string.IsNullOrEmpty(resource.Name)) return;
		var localizerIndexerKey = GetLocalizerIndexerKey(resource, category);

		var propertyComment = GetCommentForResourceProperty(resource);

		if (resource.Parameters.Count == 0) 
		{
			if (Settings.UseExpressionBodySyntax)
			{
#>
		/// <summary>
		/// Gets localized string similar to: <#= propertyComment #>
		/// </summary>
		public static string <#= resource.Name #> => _localizer[<#= localizerIndexerKey #>];

<#+
			}
			else
			{
#>
		/// <summary>
		/// Gets localized string similar to: <#= propertyComment #>
		/// </summary>
		public static string <#= resource.Name #>
		{
			get
			{
				return _localizer[<#= localizerIndexerKey #>];
			}
		}

<#+
			}

		} 
		else 
		{
			var paramNames = resource.Parameters.Count == 0 ? string.Empty : ", " + string.Join(",", resource.Parameters.Select(x => x.Name));
			var paramNamesWithTypes = string.Join(",", resource.Parameters.Select(x => "object " + x.Name));
			
			if (Settings.UseExpressionBodySyntax)
			{
#>
		/// <summary>
		/// Gets localized string similar to: <#= propertyComment #>
		/// </summary>
		public static string <#= resource.Name #>(<#= paramNamesWithTypes #>) => _localizer[<#= localizerIndexerKey #><#= paramNames #>];

<#+
			}
			else
			{
#>
		/// <summary>
		/// Gets localized string similar to: <#= propertyComment #>
		/// </summary>
		public static string <#= resource.Name #>(<#= paramNamesWithTypes #>)
		{
			return _localizer[<#= localizerIndexerKey #><#= paramNames #>];
		}

<#+
			}
		}
	}
}
#>