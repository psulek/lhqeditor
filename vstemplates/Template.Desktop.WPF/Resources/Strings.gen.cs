//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool - Localization HQ Editor.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Template.Desktop.WPF
{
	using System;
	using System.ComponentModel;
	using System.Linq;
	using System.Resources;
	using System.Reflection;
	using System.Globalization;
	using System.Runtime.CompilerServices;
	using System.Threading;

	[System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	public partial class StringsContext: INotifyPropertyChanged, IFormattable
	{
		private CultureInfo _culture;
		private CultureInfo _fallbackCulture;
		private static readonly Lazy<StringsContext> _instance = new Lazy<StringsContext>(() => new StringsContext());
		private static readonly Lazy<ResourceManager> _resourceManager = new Lazy<ResourceManager>(CreateResourceManager);

		private StringsContext()
        {}

		public static ResourceManager ResourceManager
		{
		    get
			{
			    return _resourceManager.Value;
			}
		}

		public const string PrimaryCulture = "en";

		public string[] AvailableCultures => new[] {
			"de","en","sk"
		};

		public CultureInfo FallbackCulture
        {
	        get
	        {
	            if (_fallbackCulture == null)
	            {
	                _fallbackCulture = new CultureInfo(PrimaryCulture);
	            }
	            return _fallbackCulture;
	        }
	        set
	        {
	            if ((value == null) || !AvailableCultures.Contains(value.Name))
	            {
	                throw new InvalidOperationException($"Unable to set fallback culture to '{value.Name}' which is not defined in available cultures!");
	            }

	            _fallbackCulture = value;
            }
	    }

		public static StringsContext Instance
		{
		    get
			{
				return _instance.Value;
			}
		}
		
		public CultureInfo Culture
        {
            get
			{
			    return _culture ?? (_culture = CultureInfo.CurrentUICulture);
			}
            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("Culture must not be null");
                }

                if (value.Name == Culture.Name)
                {
                    return;
                }

                _culture = value;
                Thread.CurrentThread.CurrentUICulture = _culture;
                OnPropertyChanged(nameof(Culture));
            }
        }

		private static ResourceManager CreateResourceManager()
		{
		    return new ResourceManager("ScaleHQ.Windows.WPF1.Resources.Strings",
				typeof(ScaleHQ.Windows.WPF1.Strings).Assembly);
		}

		public string ToString(string format, IFormatProvider formatProvider)
        {
            return GetStringSafely(format);
        }

		public string GetStringSafely(string name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            string result = string.Empty;
            try
            {
                result = Culture == null ? ResourceManager.GetString(name) : ResourceManager.GetString(name, Culture);
                if (string.IsNullOrEmpty(result) && FallbackCulture != null)
                {
                    result = ResourceManager.GetString(name, FallbackCulture);
                }
            }
            catch (MissingManifestResourceException)
            {
                return $"???{name}.{Culture?.Name}???";
            }

            return result;
        }

		public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string property)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(property));
        }
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	public static partial class StringsKeys
	{
		public static partial class Languages
		{
			/// <summary>
			/// Gets localized string similar to: German Language
			/// </summary>
			public const string de = "Languagesde";
			/// <summary>
			/// Gets localized string similar to: English Language
			/// </summary>
			public const string en = "Languagesen";
			/// <summary>
			/// Gets localized string similar to: Slovak Language
			/// </summary>
			public const string sk = "Languagessk";
		}
		
		public static partial class Messages
		{
			/// <summary>
			/// Gets localized string similar to: Hi {0}, we're glad you are using {1} at {2}
			/// </summary>
			public const string Title = "MessagesTitle";
			/// <summary>
			/// Gets localized string similar to: Welcome
			/// </summary>
			public const string Welcome = "MessagesWelcome";
		}
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	public partial class Strings
	{
		public static partial class Languages
		{
			/// <summary>
			/// Gets localized string similar to: German Language
			/// </summary>
			public static string de
			{
			    get
				{
				    return StringsContext.Instance.GetStringSafely(StringsKeys.Languages.de);
				}
			}

			/// <summary>
			/// Gets localized string similar to: English Language
			/// </summary>
			public static string en
			{
			    get
				{
				    return StringsContext.Instance.GetStringSafely(StringsKeys.Languages.en);
				}
			}

			/// <summary>
			/// Gets localized string similar to: Slovak Language
			/// </summary>
			public static string sk
			{
			    get
				{
				    return StringsContext.Instance.GetStringSafely(StringsKeys.Languages.sk);
				}
			}

		}
		
		public static partial class Messages
		{
			/// <summary>
			/// Gets localized string similar to: Hi {0}, we're glad you are using {1} at {2}
			/// </summary>
			public static string Title(object userName,object productName,object date)
			{
			    return string.Format(StringsContext.Instance.GetStringSafely(StringsKeys.Messages.Title), userName,productName,date);
			}

			/// <summary>
			/// Gets localized string similar to: Welcome
			/// </summary>
			public static string Welcome
			{
			    get
				{
				    return StringsContext.Instance.GetStringSafely(StringsKeys.Messages.Welcome);
				}
			}

		}
	}
}
